<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lawson&#39;s Blog</title>
  
  <subtitle>尝尽人间百味，方知人间冷暖。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lawsan.xyz/"/>
  <updated>2020-07-09T15:19:36.140Z</updated>
  <id>http://lawsan.xyz/</id>
  
  <author>
    <name>Lawson</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从输入URL到页面展示，这中间发生了啥</title>
    <link href="http://lawsan.xyz/2020/07/09/%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%EF%BC%8C%E8%BF%99%E4%B8%AD%E9%97%B4%E5%8F%91%E7%94%9F%E4%BA%86%E5%95%A5/"/>
    <id>http://lawsan.xyz/2020/07/09/%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%EF%BC%8C%E8%BF%99%E4%B8%AD%E9%97%B4%E5%8F%91%E7%94%9F%E4%BA%86%E5%95%A5/</id>
    <published>2020-07-09T13:48:16.000Z</published>
    <updated>2020-07-09T15:19:36.140Z</updated>
    
    <content type="html"><![CDATA[<p>这道题应该是一个非常经典的题目，包括了HTTP、TCP连接、浏览器缓存、浏览器渲染等等。<br>用户输入URL后，向服务器端发起请求、如果顺利，得到网络响应之后，浏览器对资源进行解析、最后将其渲染到页面上。具体步骤如下👇</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/7.09/%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>首先构建请求</li><li>查找缓存，如果命中缓存，直接使用缓存资源(包括DNS缓存)</li><li>否则进行DNS解析，将域名转换成对应的IP地址</li><li>建立TCP连接</li><li>发送HTTP请求</li><li>如果顺利得到网络响应，浏览器开始解析和渲染</li><li>HTML解释器 解析HTML 为 DOM树</li><li>同时CSS解释器 解析CSS文档 为 styleSheets</li><li>创建布局树，进行布局计算</li><li>整合图层，展示页面<br>我们先来分析一下HTTP请求，请求流程如下👇<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/7.09/HTTP%E8%AF%B7%E6%B1%82%E5%90%84%E4%B8%AA%E9%98%B6%E6%AE%B5.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="首先构建请求"><a href="#首先构建请求" class="headerlink" title="首先构建请求"></a>首先构建请求</h2>首先，浏览器构建请求行信息（如下所示），构建好后，浏览器准备发起网络请求。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;index.html HTTP1.1</span><br></pre></td></tr></table></figure><h2 id="查找缓存"><a href="#查找缓存" class="headerlink" title="查找缓存"></a>查找缓存</h2>在真正发起网络请求之前，浏览器会先在浏览器缓存中查询是否有要请求的文件。其中，浏览器缓存是一种在本地保存资源副本，以供下次请求时直接使用的技术。<br>当浏览器发现请求的资源已经在浏览器缓存中存有副本，它会拦截请求，返回该资源的副本，并直接结束请求，而不会再去源服务器重新下载。<br>这样做的好处有：</li><li>缓解服务器端压力，提升性能（获取资源的耗时更短了）；</li><li>对于网站来说，缓存是实现快速资源加载的重要组成部分。<br>当然，如果缓存查找失败，就会进入网络请求过程了。</li></ol><h2 id="DNS解析，将域名转换成对应的IP地址"><a href="#DNS解析，将域名转换成对应的IP地址" class="headerlink" title="DNS解析，将域名转换成对应的IP地址"></a>DNS解析，将域名转换成对应的IP地址</h2><p><strong>默认端口</strong> http为80，https为443。<br><strong>DNS解析</strong>：将域名映射成对应的IP地址，这套域名映射为 IP 的系统就叫做“域名系统”，简称 DNS（Domain Name System）<br><strong>DNS数据缓存服务</strong>：浏览器还提供了 DNS 数据缓存服务，如果某个域名已经解析过了，那么浏览器会缓存解析的结果，以供下次查询时直接使用，这样也会减少一次网络请求。</p><h2 id="建立TCP连接"><a href="#建立TCP连接" class="headerlink" title="建立TCP连接"></a>建立TCP连接</h2><p><strong>网络OSI七层架构(从低到高)</strong>：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。<br><strong>计算机网络知识</strong>：HTTP在应用层，TCP在传输层，IP在网络层。<br>浏览器使用 HTTP 协议作为应用层协议，用来封装请求的文本信息；并使用 TCP/IP 作传输层协议将它发到网络上，所以在 HTTP 工作开始之前，浏览器需要通过 TCP 与服务器建立连接。<br>也就是说 HTTP 的内容是通过 TCP 的传输数据阶段来实现的，你可以结合下图更好地理解这二者的关系。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/7.09/TCP%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>等待TCP队列</strong>：在建立TCP建立之前，可能要进入TCP队列。因为浏览器的限制，同一个域名同时最多只能建立 6 个 TCP 连接，如果在同一个域名下同时有 10 个请求发生，那么其中 4 个请求会进入排队等待状态，直至进行中的请求完成。当然如果少于6个就不用进入队列等待。<br>浏览器通过TCP3次握手和服务器建立连接，建立连接后进行数据传输，传输完成后，经过4次TCP握手断开连接。如下图👇</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/7.09/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%BF%9E%E6%8E%A5.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>TCP三次握手建立连接，http请求加上TCP头部——包括源端口号、目的程序端口号和用于校验数据完整性的序号，向下传输。</li><li>网络层在数据包上加上IP头部——包括源IP地址和目的IP地址，继续向下传输到底层。</li><li>底层通过物理网络传输给目的服务器主机，紧接着目的服务器主机网络层接收到数据包，解析出IP头部，识别出数据部分，将解开的数据包向上传输到传输层。</li><li>目的服务器主机传输层获取到数据包，解析出TCP头部，识别端口，将解开的数据包向上传输到应用层</li><li>说白就是从网络底层到高层就是对数据脱外套，相反就是穿外套。<br><code>Connection:Keep-Alive</code>:如果请求头里面有这个属性，数据传输完成后，不会断开TCP的。</li></ol><h2 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h2><p>上面大概讲完了建立TCP连接，你可以理解TCP的连接，是为了保证浏览器跟服务器更好的通信。当然了有了上面的这个过程中， HTTP 中的数据也正是在这个通信过程中传输的。<br>那么我们从一张图片中来看，浏览器是如何发送信息给服务器的👇</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/7.09/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><strong>请求行</strong>：<code>请求方法</code>，<code>请求URL</code> <code>HTTP协议版本</code>；</li><li>请求行大概意思就是告诉服务器，我需要做上面，比如GET方法，我需要向你拿资源，POST方法通常也就是我需要向服务器提交什么数据，需要注意的就是如果是POST方法，浏览器还需要准备好数据，通过请求体发送给服务器。</li><li><strong>请求头</strong>：把浏览器的基础信息告诉服务器，比如包含了浏览器所使用的操作系统，浏览器的内核信息等，还有请求的域名信息，浏览器的Cookie信息等等。</li><li><strong>请求体</strong>：一些业务逻辑需要的数据。</li></ul><h2 id="得到网络响应，浏览器开始解析和渲染"><a href="#得到网络响应，浏览器开始解析和渲染" class="headerlink" title="得到网络响应，浏览器开始解析和渲染"></a>得到网络响应，浏览器开始解析和渲染</h2><p>我们也来看一看响应的报文吧👇</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/7.09/%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><strong>响应行</strong>：HTTP协议版本 状态码，通过常见的状态码，就可以知道处理的结果。</li><li><strong>响应头</strong>：你可以理解成包含服务器自身的一些信息，比如服务器生成数据的时间，返回数据的类型（HTML，流媒体，JSON，XHTML等等）以及服务器在客户端保存的Cookie等信息。响应头中 Cache-Control 字段也很重要，这个涉及到了HTTP缓存，这个字段涵义就是设置缓存资源的时间的</li><li><strong>响应体</strong>：请求返回的内容。<br>返回的状态码中有<code>301</code>或者<code>302</code>即可发生重定向；302为临时重定向，301为永久重定向。<br><code>Content-Type</code>:浏览器会按照这个内容类型来解析。<h2 id="HTML解释器-解析HTML-为-DOM树"><a href="#HTML解释器-解析HTML-为-DOM树" class="headerlink" title="HTML解释器 解析HTML 为 DOM树"></a>HTML解释器 解析HTML 为 DOM树</h2>渲染进程对文档进行页面解析和子资源加载，HTML 通过HTM 解析器转成DOM Tree（二叉树类似结构的东西），CSS按照CSS 规则和CSS解释器转成CSSOM TREE，两个tree结合，形成render tree（不包含HTML的具体元素和元素要画的具体位置），通过Layout可以计算出每个元素具体的宽高颜色位置，结合起来，开始绘制，最后显示在屏幕中新页面显示出来。<br>哎！，感觉后面的内容有点多，再新建一篇文章讲讲后面的内容（浏览器的渲染机制）。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/emotion/%E5%B0%8F%E9%BB%84%E9%B8%A1%E8%80%B6.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这道题应该是一个非常经典的题目，包括了HTTP、TCP连接、浏览器缓存、浏览器渲染等等。&lt;br&gt;用户输入URL后，向服务器端发起请求、如果顺利，得到网络响应之后，浏览器对资源进行解析、最后将其渲染到页面上。具体步骤如下👇&lt;/p&gt;
&lt;figure class=&quot;image-
      
    
    </summary>
    
    
    
      <category term="浏览器" scheme="http://lawsan.xyz/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="HTTP" scheme="http://lawsan.xyz/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>浏览器架构你了解多少？</title>
    <link href="http://lawsan.xyz/2020/07/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91/"/>
    <id>http://lawsan.xyz/2020/07/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91/</id>
    <published>2020-07-08T02:45:05.000Z</published>
    <updated>2020-07-09T13:14:51.049Z</updated>
    
    <content type="html"><![CDATA[<p>作为前端cv仔和浏览器打交道是最多的，浏览器对我们来说可以说是个黑盒，今天我们就来聊聊浏览器的架构。<br>首先了解一下必要的知识进程和线程。</p><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><ol><li>进程是资源分配的最小单位,线程是程序执行的最小单位。</li><li>同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。</li><li>进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，而进程共享进程中的数据的，使用相同的地址空间；</li><li>多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。</li></ol><h3 id="单进程浏览器时代"><a href="#单进程浏览器时代" class="headerlink" title="单进程浏览器时代"></a>单进程浏览器时代</h3><p>顾名思义，单进程浏览器是指浏览器所以模块都运行再同一个进程里，这些模块包含了网络、插件、JavaScript 运行环境、渲染引擎和页面等。<br>单进程浏览器的架构如下图所示👇</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/7.09/%E5%8D%95%E8%BF%9B%E7%A8%8B%E6%B5%8F%E8%A7%88%E5%99%A8.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如此多的功能模块运行在一个进程里，肯定有着不足的：</p><ol><li>不稳定性：只要一个线程崩溃，这个进程就崩溃，浏览就用不了了。</li><li>不流畅： 多个任务共用一个线程，比如页面线程。</li><li>不安全：没有沙箱机制。</li></ol><h3 id="多进程浏览器时代"><a href="#多进程浏览器时代" class="headerlink" title="多进程浏览器时代"></a>多进程浏览器时代</h3><h4 id="早期多进程架构"><a href="#早期多进程架构" class="headerlink" title="早期多进程架构"></a>早期多进程架构</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/7.09/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%B5%8F%E8%A7%88%E5%99%A8.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>从图中可以看出，Chrome 的页面是运行在单独的渲染进程中的，同时页面里的插件也是运行在单独的插件进程之中，而进程之间是通过 IPC 机制进行通信（如图中虚线部分）</p><ul><li><strong>解决早期浏览器不稳定问题</strong>：由于进程是相互隔离的，所以当一个页面或者插件崩溃时，影响到的仅仅是当前的页面进程或者插件进程，并不会影响到浏览器和其他页面，这就完美地解决了页面或者插件的崩溃会导致整个浏览器崩溃，也就是不稳定的问题。</li><li><strong>解决早期浏览器不流畅问题</strong>：JavaScript 也是运行在渲染进程中的，所以即使 JavaScript 阻塞了渲染进程，影响到的也只是当前的渲染页面，而并不会影响浏览器和其他页面，因为其他页面的脚本是运行在它们自己的渲染进程中的。所以当我们再在 Chrome 中运行上面那个死循环的脚本时，没有响应的仅仅是当前的页面。对于内存泄漏的解决方法那就更简单了，因为当关闭一个页面时，整个渲染进程也会被关闭，之后该进程所占用的内存都会被系统回收，这样就轻松解决了浏览器页面的内存泄漏问题。</li><li><strong>解决早期浏览器不安全问题</strong>：用多进程架构的额外好处是可以使用安全沙箱，你可以把沙箱看成是操作系统给进程上了一把锁，沙箱里面的程序可以运行，但是不能在你的硬盘上写入任何数据，也不能在敏感位置读取任何数据，例如你的文档和桌面。Chrome 把插件进程和渲染进程锁在沙箱里面，这样即使在渲染进程或者插件进程里面执行了恶意程序，恶意程序也无法突破沙箱去获取系统权限。</li></ul><h4 id="目前多进程架构"><a href="#目前多进程架构" class="headerlink" title="目前多进程架构"></a>目前多进程架构</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/7.09/%E7%9B%AE%E5%89%8D%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>从图中可以看出，最新的 Chrome 浏览器包括：1 个浏览器（Browser）主进程、1 个 GPU 进程、1 个网络（NetWork）进程、多个渲染进程和多个插件进程。<br>下面我们来逐个分析下这几个进程的功能👇</p><ul><li><strong>浏览器进程</strong>。主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</li><li><strong>渲染进程</strong>。核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</li><li><strong>GPU进程</strong>。Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。</li><li><strong>网络进程</strong>。主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。</li><li><strong>插件进程</strong>。主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</li></ul><p><strong>多进程带来的问题</strong>：</p><ol><li>更高的资源占用因为每个进程都会包含公共基础结构的副本（如 JavaScript 运行环境），这就意味着浏览器会消耗更多的内存资源。</li><li>更复杂的体系架构浏览器各模块之间耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求了</li></ol><h3 id="面向未来的架构"><a href="#面向未来的架构" class="headerlink" title="面向未来的架构"></a>面向未来的架构</h3><p>为了解决上面的问题，在2016年，Chrome官方团队使用“面向服务的架构”（Services Oriented Architecture，简称 SOA）的思想设计了新的 Chrome 架构Chrome 最终要把 UI、数据库、文件、设备、网络等模块重构为基础服务，类似操作系统底层服务，下面是 Chrome“面向服务的架构”的进程模型。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/7.09/%E6%9C%AA%E6%9D%A5%E6%9E%B6%E6%9E%84.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="试题"><a href="#试题" class="headerlink" title="试题"></a>试题</h3><ul><li><strong>为什么单进程浏览器当时不可以采用安全沙箱？</strong><br>如果一个进程使用了安全沙箱之后，该进程对于操作系统的权限就会受到限制，比如不能对一些位置的文件进行读写操作，而这些权限浏览器主进程所需要的，所以安全沙箱是不能应用到浏览器主进程之上的。</li><li><strong>打开Chrome浏览器一个Tab页面，至少会出现几个进程？</strong><br>最新的Chrome浏览器包括至少四个:1 个浏览器（Browser）主进程、1 个 GPU 进程、1 个网络（NetWork）进程、多个渲染进程和多个插件进程,当然还有复杂的情况；</li></ul><ol><li>页面中有iframe的话,iframe会单独在进程中</li><li>有插件的话，插件也会开启进程</li><li>多个页面属于同一站点，并且从a打开b页面，会共用一个渲染进程</li><li>装了扩展的话，扩展也会占用进程<br>这些进程都可以通过Chrome任务管理器来查看</li></ol><ul><li><strong>即使如今多进程架构，还是会碰到单页面卡死的最终崩溃导致所有页面崩溃的情况，讲一讲你的理解？</strong><br>Chrome的默认策略是，每个标签对应一个渲染进程。但是如果从一个页面打开了新页面，而新页面和当前页面属于同一站点时，那么新页面会复用父页面的渲染进程。官方把这个默认策略叫process-per-site-instance。<br>更加简单的来说，就是如果多个页面符合同一站点，这几个页面会分配到一个渲染进程中去,所以有这样子的一种情况,一个页面崩溃了，会导致同一个站点的其他页面也奔溃，这是因为它们使用的是同一个渲染进程。<br>它们在一个渲染进程中的话，它们就会共享JS执行环境，也就是A页面可以直接在B页面中执行脚本了。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为前端cv仔和浏览器打交道是最多的，浏览器对我们来说可以说是个黑盒，今天我们就来聊聊浏览器的架构。&lt;br&gt;首先了解一下必要的知识进程和线程。&lt;/p&gt;
&lt;h3 id=&quot;进程与线程&quot;&gt;&lt;a href=&quot;#进程与线程&quot; class=&quot;headerlink&quot; title=&quot;进程与
      
    
    </summary>
    
    
    
      <category term="浏览器" scheme="http://lawsan.xyz/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>经典算法以及数据结构</title>
    <link href="http://lawsan.xyz/2020/07/07/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://lawsan.xyz/2020/07/07/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2020-07-07T09:31:21.000Z</published>
    <updated>2020-07-07T10:49:35.829Z</updated>
    
    <content type="html"><![CDATA[<p>斐波那契数列在算法题中比较经典，故出此文以此铭记。<br>题目：大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0，第1项是1）。n&lt;=39</p><h3 id="暴力递归实现"><a href="#暴力递归实现" class="headerlink" title="暴力递归实现"></a>暴力递归实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> n</span><br><span class="line"><span class="keyword">return</span> Fibonacci(n<span class="number">-1</span>) + Fibonacci(n<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组保存计算缓存，减少计算"><a href="#数组保存计算缓存，减少计算" class="headerlink" title="数组保存计算缓存，减少计算"></a>数组保存计算缓存，减少计算</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">return</span> Fib(n)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fib</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[n] !== <span class="literal">undefined</span> ) <span class="keyword">return</span> arr[n] <span class="comment">//计算过的不用再计算</span></span><br><span class="line"><span class="keyword">return</span> arr[n] = Fib(n<span class="number">-1</span>) + Fib(n<span class="number">-2</span>)   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0</span> <span class="comment">//第一项</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span> <span class="comment">//第二项</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>;i&lt; n;i++ )&#123; <span class="comment">//从第二项开始到n-1项</span></span><br><span class="line">[a,b] = [b,a+b]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉这篇幅有点短，好吧再加几个算法题^_^</p><h3 id="经典算法二分查找"><a href="#经典算法二分查找" class="headerlink" title="经典算法二分查找"></a>经典算法二分查找</h3><p>题目：在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Find</span>(<span class="params">target,array</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span> ;i&lt;array.length;i++)&#123;</span><br><span class="line"><span class="keyword">let</span> low = <span class="number">0</span> <span class="comment">//每行的开始索引</span></span><br><span class="line"><span class="keyword">let</span> height = array[i].length - <span class="number">1</span> <span class="comment">//每行的最大索引</span></span><br><span class="line"><span class="keyword">while</span>(low &lt;= height)&#123;<span class="comment">//对每一行的数组进行二分查找</span></span><br><span class="line"><span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((low+height)/<span class="number">2</span>) </span><br><span class="line"><span class="keyword">if</span>(target &gt; array[i][mid])&#123;</span><br><span class="line">low = mid + <span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &lt; array[i][mid])&#123;</span><br><span class="line">height = mid <span class="number">-1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span> <span class="comment">//没有找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此题还有一种更好的思路：既然是递增数组，那我们就比较一下每一行数组最大的元素，如果此数大于这一行的最大元素则去下一行数组比较，如果此数小于这一行的最大元素则去前一列比较；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Find</span>(<span class="params">target,array</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> row = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> col = array[<span class="number">0</span>].length <span class="number">-1</span></span><br><span class="line"><span class="keyword">let</span> len = array.length</span><br><span class="line"><span class="keyword">while</span>(row &lt; len &amp;&amp; <span class="number">0</span> &lt;= col)&#123; <span class="comment">//row是索引要小于行数，col要大于0</span></span><br><span class="line"><span class="keyword">if</span>(target &gt; array[row][col])&#123;</span><br><span class="line">row++</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &lt; array[row][col])&#123;</span><br><span class="line">col--</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表也是数据结构中的一种，由指针指向。<br>题目：输入一个链表，按链表从尾到头的顺序返回一个ArrayList。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*function ListNode(x)&#123;</span></span><br><span class="line"><span class="comment">    this.val = x;</span></span><br><span class="line"><span class="comment">    this.next = null;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printListFromTailToHead</span>(<span class="params">head</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ArrayList = []</span><br><span class="line">    <span class="keyword">while</span>(head)&#123;</span><br><span class="line">        ArrayList.push(head.val)</span><br><span class="line">        head = head.next</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayList.reverse()</span><br><span class="line">    <span class="keyword">return</span> ArrayList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript实现队列"><a href="#JavaScript实现队列" class="headerlink" title="JavaScript实现队列"></a>JavaScript实现队列</h3><p>队列是数据结构中的一种，先进先出<code>FIFO</code>,我们用数组来实现它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> arr = []</span><br><span class="line"><span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(arr.length &lt;= <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line"><span class="keyword">return</span> arr.shift()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">arr.push(data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line">queue.push(<span class="number">1</span>)</span><br><span class="line">queue.push(<span class="number">2</span>)</span><br><span class="line">queue.push(<span class="number">3</span>)</span><br><span class="line">queue.pop() <span class="comment">//1</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript实现栈"><a href="#JavaScript实现栈" class="headerlink" title="JavaScript实现栈"></a>JavaScript实现栈</h3><p>栈是数据结构中的一种，先进先出<code>FILO</code>,我们用数组来实现它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> value = []</span><br><span class="line"><span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(value.length &lt;= <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line"><span class="keyword">return</span> value.pop()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">value.push(data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line">stack.push(<span class="number">1</span>)</span><br><span class="line">stack.push(<span class="number">2</span>)</span><br><span class="line">stack.push(<span class="number">3</span>)</span><br><span class="line">stack.pop() <span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>好了此次的文章就写到这了，祝高三学子高考顺利！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;斐波那契数列在算法题中比较经典，故出此文以此铭记。&lt;br&gt;题目：大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0，第1项是1）。n&amp;lt;=39&lt;/p&gt;
&lt;h3 id=&quot;暴力递归实现&quot;&gt;&lt;a href=&quot;#暴力递归实现&quot; c
      
    
    </summary>
    
    
    
      <category term="算法" scheme="http://lawsan.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="http://lawsan.xyz/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="动态规划" scheme="http://lawsan.xyz/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="二分查找" scheme="http://lawsan.xyz/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>canvas踩坑日记</title>
    <link href="http://lawsan.xyz/2020/07/02/canvas%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    <id>http://lawsan.xyz/2020/07/02/canvas%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/</id>
    <published>2020-07-02T08:25:24.000Z</published>
    <updated>2020-07-07T05:31:45.698Z</updated>
    
    <content type="html"><![CDATA[<p>这次利用canvas主要是对图片进行剪切，再对要修改图片的部分用html显示，然后通过<code>html2canvas.js</code>转化为图片。这个方法可以对图片进行PS，不过这种方法有局限，需要定制以及移动端适配。</p><h3 id="利用canvas的API进行剪切"><a href="#利用canvas的API进行剪切" class="headerlink" title="利用canvas的API进行剪切"></a>利用canvas的API进行剪切</h3><p>注意：Canvas 的默认大小为300像素×150像素（宽×高，像素的单位是px）。但是，可以使用HTML的高度和宽度属性来自定义Canvas 的尺寸。<font color="red">也就是说通过css给canvas添加样式是行不通的</font>（这个坑费了我好多时间)。<br>解决方案：动态添加canvas；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>图片应用:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"scream"</span> <span class="attr">src</span>=<span class="string">"img_the_scream.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>画布:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"150"</span> <span class="attr">style</span>=<span class="string">"border:1px solid #d3d3d3;"</span>&gt;</span></span><br><span class="line">您的浏览器不支持 HTML5 canvas 标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"scream"</span>).onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> c=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line">    <span class="keyword">var</span> ctx=c.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="keyword">var</span> img=<span class="built_in">document</span>.getElementById(<span class="string">"scream"</span>);</span><br><span class="line">    ctx.drawImage(img,<span class="number">90</span>,<span class="number">130</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">60</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="关于drawImage的使用"><a href="#关于drawImage的使用" class="headerlink" title="关于drawImage的使用"></a>关于drawImage的使用</h3><p>有三种语法的使用：</p><ol><li><code>context.drawImage(img,dx,dy);</code></li><li><code>context.drawImage(img,dx,dy,dw,dh);</code></li><li><code>context.drawImage(img,sx,sy,sw,sh,dx,dy,dw,dh);</code><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/7.02/1.jpg" alt="坐标草图" title>                </div>                <div class="image-caption">坐标草图</div>            </figure>对图片进行剪切<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> IMG = &#123;</span><br><span class="line">file: <span class="number">0</span>, <span class="comment">//图片文件</span></span><br><span class="line">width: <span class="number">0</span>, <span class="comment">//源图片宽度</span></span><br><span class="line">height: <span class="number">0</span>, <span class="comment">//源图片高度</span></span><br><span class="line">firstY: <span class="number">330</span>, <span class="comment">//第一次剪切高度（从0开始）</span></span><br><span class="line">secondY: <span class="number">410</span>, <span class="comment">//第二次剪切高度（第二次开始剪切的y坐标）</span></span><br><span class="line">money: <span class="string">"-588.00"</span>, <span class="comment">//要修改的数字</span></span><br><span class="line">bg: <span class="string">"#f7f7f7"</span>, <span class="comment">//#f5f5f5</span></span><br><span class="line">fontSize:<span class="string">'60px'</span>,</span><br><span class="line">&#125;</span><br><span class="line">pic.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">IMG.height = pic.height;</span><br><span class="line">IMG.width = pic.width;</span><br><span class="line">ctx1.drawImage(pic, <span class="number">0</span>, <span class="number">0</span>, pic.width, IMG.firstY, <span class="number">0</span>, <span class="number">0</span>, pic.width, IMG.firstY);</span><br><span class="line">ctx2.drawImage(pic, <span class="number">0</span>, IMG.secondY, pic.width, (IMG.height - IMG.secondY), <span class="number">0</span>, <span class="number">0</span>, pic.width, (IMG.height -IMG.secondY));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>对图片要要修改的部分用html代替显示，然后html转图片<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">html2canvas(canvasBox, &#123;</span><br><span class="line">allowTaint: <span class="literal">true</span>, <span class="comment">//允许污染</span></span><br><span class="line">taintTest: <span class="literal">true</span>, <span class="comment">//在渲染前测试图片</span></span><br><span class="line">useCORS: <span class="literal">true</span>, <span class="comment">//使用跨域</span></span><br><span class="line">background:IMG.bg,</span><br><span class="line">dpi: <span class="built_in">window</span>.devicePixelRatio * <span class="number">2</span>, <span class="comment">//分辨率，是图片清晰点</span></span><br><span class="line">scale: <span class="number">2</span>,</span><br><span class="line">height: IMG.height - <span class="number">10</span>, <span class="comment">//截图高度</span></span><br><span class="line">width: IMG.width, <span class="comment">//截图宽度</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">canvas</span>) </span>&#123;</span><br><span class="line"><span class="comment">//显示ps好的图片</span></span><br><span class="line"><span class="keyword">let</span> show = <span class="built_in">document</span>.getElementById(<span class="string">'show'</span>);</span><br><span class="line">show.style.display = <span class="string">'block'</span>;</span><br><span class="line">show.src = canvas.toDataURL();</span><br><span class="line">canvasBox.style.display = <span class="string">'none'</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>此次是对支付宝账单详情的金额进行ps，整个源码地址==&gt;<a href="https://gitee.com/chuan8905/codes/ds7e8pmfqoajn94yxi6c181" target="_blank" rel="noopener">canvas对支付宝账单详情进行P图</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这次利用canvas主要是对图片进行剪切，再对要修改图片的部分用html显示，然后通过&lt;code&gt;html2canvas.js&lt;/code&gt;转化为图片。这个方法可以对图片进行PS，不过这种方法有局限，需要定制以及移动端适配。&lt;/p&gt;
&lt;h3 id=&quot;利用canvas的API
      
    
    </summary>
    
    
    
      <category term="canvas" scheme="http://lawsan.xyz/tags/canvas/"/>
    
      <category term="html2canvas" scheme="http://lawsan.xyz/tags/html2canvas/"/>
    
  </entry>
  
  <entry>
    <title>聊聊几种排序算法</title>
    <link href="http://lawsan.xyz/2020/07/02/%E8%81%8A%E8%81%8A%E5%87%A0%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://lawsan.xyz/2020/07/02/%E8%81%8A%E8%81%8A%E5%87%A0%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2020-07-02T08:09:54.494Z</published>
    <updated>2020-07-03T14:57:34.258Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Javascript-API实现排序"><a href="#Javascript-API实现排序" class="headerlink" title="Javascript API实现排序"></a>Javascript API实现排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">72</span>, <span class="number">45</span>, <span class="number">62</span>, <span class="number">12</span>, <span class="number">23</span>, <span class="number">67</span>, <span class="number">80</span>, <span class="number">56</span>, <span class="number">90</span>, <span class="number">6</span>, <span class="number">9</span>];</span><br><span class="line">arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b);</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>基本思路：每次执行循环就把一个最大的数放到最后，就像气泡一样一个一个的冒；第一个循环遍历数组所有元素，第二个循环遍历是找出最大数值然后放在最后，时间复杂度为O(n2)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> arrLength = arr.length</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrLength; i++) &#123;</span><br><span class="line"><span class="comment">//两个数比较，i表示数组总个数，j代表第一个数（索引较前）最大就是倒数第二个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arrLength - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">[arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]] <span class="comment">//交换两个数值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>基本思路：</p><ul><li>每次执行循环找出最小值的索引值，并把这个最小放到前面，索引i前面的数组是依次排好的，时间复杂度为O(n2)。</li><li>与冒泡排序比较，冒泡排序是每次找出最大值放到最后而选择排序这是每次找出最小值放到前面。每次循环都会从乱序数组中找出最大（最小）值排到有序数组中。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> arrLength = arr.length</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrLength; i++) &#123;</span><br><span class="line"><span class="keyword">let</span> minIndex = i</span><br><span class="line"><span class="comment">//每次循环找出最小值索引</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j = i;j&lt;arrLength;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&lt;arr[minIndex])&#123;</span><br><span class="line">minIndex = j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把最小值放到前面数组</span></span><br><span class="line">[arr[i],arr[minIndex]] = [arr[minIndex],arr[i]]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>基本思路：在已有排序的数组中找出自己位置，插入其中；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> arrLength = arr.length</span><br><span class="line"><span class="keyword">let</span> preIndex,current</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;arrLength;i++)&#123;</span><br><span class="line">preIndex = i - <span class="number">1</span> </span><br><span class="line">current = arr[i]</span><br><span class="line"><span class="comment">//这个循环就是找出自己的位置，然后跳出，比较这个原始和current的大小，大则移后</span></span><br><span class="line"><span class="keyword">while</span>(preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; current)&#123;</span><br><span class="line">arr[preIndex + <span class="number">1</span>] = arr[preIndex]</span><br><span class="line"><span class="number">45</span>,<span class="number">72</span>,<span class="number">72</span></span><br><span class="line">preIndex --;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">arr[preIndex + <span class="number">1</span>] = current;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>基本思路：该算法是采用分治法，将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> len = arr.length</span><br><span class="line"><span class="keyword">if</span>(len&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把长度为n的输入序列分成两个长度为n/2的子序列</span></span><br><span class="line"><span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor(len/<span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> left = arr.slice(<span class="number">0</span>,mid)</span><br><span class="line"><span class="keyword">let</span> right = arr.slice(mid)</span><br><span class="line"><span class="comment">//对这两个子序列分别采用归并排序</span></span><br><span class="line"><span class="keyword">return</span> merge(mergeSort(left),mergeSort(right))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将两个排序好的子序列合并成一个最终的排序序列。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left,right</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> result = []</span><br><span class="line"><span class="keyword">while</span>(left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>])&#123;</span><br><span class="line">result.push(left.shift())</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">result.push(right.shift())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(left.length)&#123;</span><br><span class="line">result.push(left.shift())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(right.length)&#123;</span><br><span class="line">result.push(right.shift())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>基本思路：</p><ul><li>从数列中挑出一个元素，称为 “基准”（pivot）；</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr,left,right</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> len = arr.length,</span><br><span class="line">partitionIndex,</span><br><span class="line">left = <span class="keyword">typeof</span> left != <span class="string">'number'</span> ? <span class="number">0</span> : left,</span><br><span class="line">right = <span class="keyword">typeof</span> right != <span class="string">'number'</span> ? len - <span class="number">1</span> : right;</span><br><span class="line"><span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">partitionIndex = partition(arr, left ,right)</span><br><span class="line">quickSort(arr, left, partitionIndex<span class="number">-1</span>)</span><br><span class="line">quickSort(arr, partitionIndex+<span class="number">1</span>, right)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分区操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr, left ,right</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> pivot = left,</span><br><span class="line">index =pivot + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = index;i &lt;= right; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] &lt; arr[pivot])&#123;</span><br><span class="line">[arr[i],arr[index]] = [arr[index],arr[i]]</span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">[arr[pivot],arr[index<span class="number">-1</span>]] = [arr[index<span class="number">-1</span>],arr[pivot]]</span><br><span class="line"><span class="keyword">return</span> index<span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Javascript-API实现排序&quot;&gt;&lt;a href=&quot;#Javascript-API实现排序&quot; class=&quot;headerlink&quot; title=&quot;Javascript API实现排序&quot;&gt;&lt;/a&gt;Javascript API实现排序&lt;/h3&gt;&lt;figure c
      
    
    </summary>
    
    
    
      <category term="算法" scheme="http://lawsan.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序算法" scheme="http://lawsan.xyz/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Vue监听回车事件@keyup</title>
    <link href="http://lawsan.xyz/2020/06/30/Vue%E7%9B%91%E5%90%AC%E5%9B%9E%E8%BD%A6%E4%BA%8B%E4%BB%B6keyup/"/>
    <id>http://lawsan.xyz/2020/06/30/Vue%E7%9B%91%E5%90%AC%E5%9B%9E%E8%BD%A6%E4%BA%8B%E4%BB%B6keyup/</id>
    <published>2020-06-30T13:08:05.000Z</published>
    <updated>2020-07-03T10:49:37.730Z</updated>
    
    <content type="html"><![CDATA[<p>当我们要在一个输入框中监听回车事件时要绑定<code>keyup</code>事件；<br><code>keydown</code>当键盘被按下时会触发；<code>keyup</code>当键盘松开时触发；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"search_input"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="原生JavaScript实现"><a href="#原生JavaScript实现" class="headerlink" title="原生JavaScript实现;"></a>原生JavaScript实现;</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'search_input'</span>).onkeyup = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> theEvent = <span class="built_in">window</span>.event || e;</span><br><span class="line"><span class="keyword">var</span> code = theEvent.keyCode || theEvent.which || theEvent.charCode;</span><br><span class="line"><span class="keyword">if</span> (code == <span class="number">13</span>) &#123;</span><br><span class="line"><span class="comment">//doSomeThing...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jQuery实现；"><a href="#jQuery实现；" class="headerlink" title="jQuery实现；"></a>jQuery实现；</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#search_input"</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (e.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line"><span class="comment">//doSomeThing...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Vue事件绑定实现"><a href="#Vue事件绑定实现" class="headerlink" title="Vue事件绑定实现"></a>Vue事件绑定实现</h2><p>全部键盘别名 <code>enter</code>,<code>tab</code>,<code>delete</code>,<code>esc</code>,<code>space</code>,<code>up</code>,<code>down</code>,<code>left</code>,<code>right</code>;<br>组合按键 <code>ctr</code>,<code>alt</code>,<code>shift</code>,<code>meta</code>(window系统下是win键，mac下是command键)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> @keyup.enter=<span class="string">"search"</span>  v-model=<span class="string">"search_input"</span>/&gt;</span><br><span class="line"><span class="comment">//methods</span></span><br><span class="line">search()&#123;</span><br><span class="line"><span class="comment">//doSomeThing...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是封装组件的话，例如element的<code>el-input</code>，要加上<code>native</code>;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input v-model=<span class="string">"search_input"</span> @keyup.enter.native=<span class="string">"search"</span>&gt;&lt;<span class="regexp">/el-input&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当我们要在一个输入框中监听回车事件时要绑定&lt;code&gt;keyup&lt;/code&gt;事件；&lt;br&gt;&lt;code&gt;keydown&lt;/code&gt;当键盘被按下时会触发；&lt;code&gt;keyup&lt;/code&gt;当键盘松开时触发；&lt;/p&gt;
&lt;figure class=&quot;highlight htm
      
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://lawsan.xyz/tags/Vue/"/>
    
      <category term="Element" scheme="http://lawsan.xyz/tags/Element/"/>
    
  </entry>
  
</feed>
