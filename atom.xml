<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lawson&#39;s Blog</title>
  
  <subtitle>苦中作乐，方能心安理得</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lawsan.xyz/"/>
  <updated>2020-11-23T14:44:03.077Z</updated>
  <id>http://lawsan.xyz/</id>
  
  <author>
    <name>Lawson</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>腾讯一面面经</title>
    <link href="http://lawsan.xyz/2020/11/23/%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2%E9%9D%A2%E7%BB%8F/"/>
    <id>http://lawsan.xyz/2020/11/23/%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2%E9%9D%A2%E7%BB%8F/</id>
    <published>2020-11-23T12:36:20.000Z</published>
    <updated>2020-11-23T14:44:03.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问答（45min）"><a href="#问答（45min）" class="headerlink" title="问答（45min）"></a>问答（45min）</h2><ol><li>自我介绍</li><li>Vue通信机制有哪些</li><li>水平垂直居中实现</li><li>实现一个左边固定，右边自适应布局</li><li>跨域是啥？跨域有哪些？</li><li>Vue父子组件的执行流程</li><li>浏览器一帧发生了啥？</li><li>原生Ajax实现</li><li>let，const，var区别</li><li>怎么实现const里面的属性不能修改？</li><li>Promise.all() 怎么实现？</li><li>原型链是啥？</li><li>new的原理</li><li>this的指向有哪些？</li><li>怎么改变this的指向？</li><li>call、bind()、apply() 区别</li><li>Vue数据响应式原理</li><li>css盒子模型、BFC</li><li>父元素高度塌陷解决方案</li><li>requestAnimationFrame/requestIdleCallback</li><li>session、cookie、localStorage 、sessionStorage</li><li>HTTP强缓存和协商缓存</li><li>有缓存返回的状态码（200）</li><li>页面布局响应实现？（媒体查询）</li><li>http网络状态码有哪些</li><li>301和302的区别</li><li>前端安全XSS、CSRF<br>非全面（有些想不起来了）<h2 id="编程题-20min"><a href="#编程题-20min" class="headerlink" title="编程题 (20min)"></a>编程题 (20min)</h2></li><li>JSONP实现<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jsonp</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">  script.src = src</span><br><span class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>大数相加<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// input: a,b (string)</span></span><br><span class="line"> <span class="comment">//output: string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bigAdd</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> aLen = a.length</span><br><span class="line"><span class="keyword">let</span> bLen = b.length</span><br><span class="line"><span class="keyword">let</span> len = aLen &gt; bLen ? aLen : bLen <span class="comment">//取最长的字符串</span></span><br><span class="line"><span class="comment">//以 0 补位</span></span><br><span class="line"><span class="keyword">if</span>(aLen &gt; bLen)&#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; (aLen - bLen); i++) &#123;</span><br><span class="line">str += <span class="string">'0'</span></span><br><span class="line">&#125;</span><br><span class="line">b = str + b</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; (bLen - aLen); i++) &#123;</span><br><span class="line">str += <span class="string">'0'</span></span><br><span class="line">&#125;</span><br><span class="line">a = str + a</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反转字符串，从个位开始计算</span></span><br><span class="line">a = a.split(<span class="string">''</span>).reverse()</span><br><span class="line">b = b.split(<span class="string">''</span>).reverse()</span><br><span class="line"><span class="comment">//字符串转number</span></span><br><span class="line">a = a.map(<span class="function">(<span class="params">value,index</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parseInt</span>(value)</span><br><span class="line">&#125;)</span><br><span class="line">b = b.map(<span class="function">(<span class="params">value,index</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parseInt</span>(value)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> carryAdd = <span class="number">0</span>  <span class="comment">//进位</span></span><br><span class="line"><span class="keyword">let</span> res = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] + b[i] + carryAdd &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">res[i] = a[i] + b[i] - <span class="number">10</span> + carryAdd</span><br><span class="line">carryAdd = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span>(i == len - <span class="number">1</span>) res[i + <span class="number">1</span>] = <span class="number">1</span> <span class="comment">//最后一位进位</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">res[i] = a[i] + b[i] + carryAdd</span><br><span class="line">carryAdd = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res.reverse().join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bigAdd(<span class="string">'369222222'</span>,<span class="string">'359222222'</span>))</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问答（45min）&quot;&gt;&lt;a href=&quot;#问答（45min）&quot; class=&quot;headerlink&quot; title=&quot;问答（45min）&quot;&gt;&lt;/a&gt;问答（45min）&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;自我介绍&lt;/li&gt;
&lt;li&gt;Vue通信机制有哪些&lt;/li&gt;
&lt;li&gt;水平
      
    
    </summary>
    
    
    
      <category term="面经" scheme="http://lawsan.xyz/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>数组扁平</title>
    <link href="http://lawsan.xyz/2020/11/22/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3/"/>
    <id>http://lawsan.xyz/2020/11/22/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3/</id>
    <published>2020-11-22T07:00:17.000Z</published>
    <updated>2020-11-22T07:08:33.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组扁平是啥？"><a href="#数组扁平是啥？" class="headerlink" title="数组扁平是啥？"></a>数组扁平是啥？</h2><p>数组扁平化是指将一个多维数组变为一维数组；<br>实现扁平的基本思想：遍历数组arr，若arr[i]为数组则递归遍历，直至arr[i]不为数组然后与之前的结果concat。 </p><h2 id="扁平实现"><a href="#扁平实现" class="headerlink" title="扁平实现"></a>扁平实现</h2><ol><li>flat方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, [<span class="number">11</span>, <span class="number">12</span>, [<span class="number">12</span>, <span class="number">13</span>, [<span class="number">14</span>]]]], <span class="number">10</span>];</span><br><span class="line">arr.flat(<span class="literal">Infinity</span>); <span class="comment">//[1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 9, 11, 12, 12, 13, 14, 10]</span></span><br></pre></td></tr></table></figure></li><li>递归实现<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    arr.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">            res = res.concat(flatten(item));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>reduce实现（也是递归的一种写法）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">result,item</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> result.concat(<span class="built_in">Array</span>.isArray(item) ? flatten(item) : item)</span><br><span class="line">&#125;,[])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>ES6 <code>...</code>运算符实现<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(arr.some(<span class="function"><span class="params">item</span>=&gt;</span><span class="built_in">Array</span>.isArray(item))) &#123;</span><br><span class="line">        arr = [].concat(...arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>转字符串拆分实现<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">','</span>).split(<span class="string">','</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseInt</span>(item);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数组扁平是啥？&quot;&gt;&lt;a href=&quot;#数组扁平是啥？&quot; class=&quot;headerlink&quot; title=&quot;数组扁平是啥？&quot;&gt;&lt;/a&gt;数组扁平是啥？&lt;/h2&gt;&lt;p&gt;数组扁平化是指将一个多维数组变为一维数组；&lt;br&gt;实现扁平的基本思想：遍历数组arr，若arr[i]
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://lawsan.xyz/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>手写Ajax</title>
    <link href="http://lawsan.xyz/2020/11/21/%E6%89%8B%E5%86%99Ajax/"/>
    <id>http://lawsan.xyz/2020/11/21/%E6%89%8B%E5%86%99Ajax/</id>
    <published>2020-11-21T10:01:15.000Z</published>
    <updated>2020-11-21T11:02:29.501Z</updated>
    
    <content type="html"><![CDATA[<p><code>AJAX = Asynchronous JavaScript and XML</code>（异步的 JavaScript 和 XML）。<br>AJAX 不是新的编程语言，而是一种使用现有标准的新方法。<br>AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下。</p><h2 id="手写Ajax"><a href="#手写Ajax" class="headerlink" title="手写Ajax"></a>手写Ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAjax</span>(<span class="params">url,method = <span class="string">'GET'</span>,data=null</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span> )  <span class="comment">//判断是否有该对象</span></span><br><span class="line">data = data ? queryString(data) : data  <span class="comment">//参数化</span></span><br><span class="line"><span class="keyword">if</span>(method == <span class="string">'POST'</span>)&#123;</span><br><span class="line">xhr.open(method,url,<span class="literal">true</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">"content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</span><br><span class="line">xhr.send(data) <span class="comment">//'name=lisi&amp;age=18' 这种格式</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">data ? (url += <span class="string">"?"</span> + data) : data</span><br><span class="line">xhr.open(method,url,<span class="literal">true</span>)</span><br><span class="line">xhr.send()</span><br><span class="line">&#125;</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryString</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">str += key + <span class="string">'='</span> + obj[key] + <span class="string">'&amp;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str.substring(<span class="number">0</span>, str.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myAjax(<span class="string">'http://chuan.ml:8081/api/manage/article/getBy'</span>,<span class="string">'GET'</span>,&#123;<span class="attr">page</span>:<span class="number">1</span>,<span class="attr">limit</span>:<span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="Promise版Ajax"><a href="#Promise版Ajax" class="headerlink" title="Promise版Ajax"></a>Promise版Ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AjaxPromise</span>(<span class="params">url,method = <span class="string">'GET'</span>,data=null</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolved,reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span> )</span><br><span class="line">data = data ? queryString(data) : data</span><br><span class="line"><span class="keyword">if</span>(method == <span class="string">'POST'</span>)&#123;</span><br><span class="line">xhr.open(method,url,<span class="literal">true</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">"content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</span><br><span class="line">xhr.send(data) <span class="comment">//'name=lisi&amp;age=18' 这种格式</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">data ? (url += <span class="string">"?"</span> + data) : data</span><br><span class="line">xhr.open(method,url,<span class="literal">true</span>)</span><br><span class="line">xhr.send()</span><br><span class="line">&#125;</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line">resolved(xhr.responseText)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">reject(xhr)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryString</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">str += key + <span class="string">'='</span> + obj[key] + <span class="string">'&amp;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str.substring(<span class="number">0</span>, str.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AjaxPromise(<span class="string">'http://chuan.ml:8081/api/manage/article/getBy'</span>,<span class="string">'GET'</span>,&#123;<span class="attr">page</span>:<span class="number">1</span>,<span class="attr">limit</span>:<span class="number">3</span>&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;AJAX = Asynchronous JavaScript and XML&lt;/code&gt;（异步的 JavaScript 和 XML）。&lt;br&gt;AJAX 不是新的编程语言，而是一种使用现有标准的新方法。&lt;br&gt;AJAX 是与服务器交换数据并更新部分网页的艺术，在
      
    
    </summary>
    
    
    
      <category term="Ajax" scheme="http://lawsan.xyz/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>前端知识梳理</title>
    <link href="http://lawsan.xyz/2020/11/16/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    <id>http://lawsan.xyz/2020/11/16/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</id>
    <published>2020-11-16T13:31:02.000Z</published>
    <updated>2020-11-21T15:31:52.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS盒模型"><a href="#CSS盒模型" class="headerlink" title="CSS盒模型"></a>CSS盒模型</h2><p>盒模型可以分为IE盒模型（border-box)和标准盒模型(content-box);<br>盒模型的组成部分：内容（content）、填充（padding)、边框（border)和边距（margin);<br>标准盒模型：属性width和height只包含内容（content），不包含padding和border；<br>IE和模型：属性width和height包含内容（content）、填充（padding)和边框（border)</p><h2 id="伪类link、hover、active、visited、focus"><a href="#伪类link、hover、active、visited、focus" class="headerlink" title="伪类link、hover、active、visited、focus"></a>伪类link、hover、active、visited、focus</h2><ol><li><code>link</code>表示链接在正常情况下（即页面刚加载完成时）显示的颜色。</li><li><code>visited</code>表示链接被点击后显示的颜色。</li><li><code>hover</code>表示鼠标悬停时显示的颜色。</li><li><code>focus</code>表示元素获得光标焦点时使用的颜色，主要用于文本框输入文字时使用（鼠标松开时显示的颜色）。</li><li><code>active</code>表示当所指元素处于激活状态（鼠标在元素上按下还没有松开）时所显示的颜色。<br>注：伪类的顺序应为<code>link--visited--hover--focus--active</code>。<h2 id="css处理文本过长显示"><a href="#css处理文本过长显示" class="headerlink" title="css处理文本过长显示"></a>css处理文本过长显示</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ellipsis</span>&#123;</span><br><span class="line">display: block;//块状显示</span><br><span class="line">overflow: hidden;//隐藏文字</span><br><span class="line">text-overflow: ellipsis;//显示...</span><br><span class="line">white-space: nowrap; //不换行</span><br><span class="line">width:100px;//超过100px就截取</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2></li><li>行内元素<code>text-align:center</code>;</li><li>定宽块元素<code>margin:auto</code>;</li><li>使用CSS3中新增的transform属性<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translate</span>(-<span class="number">50%</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用绝对定位方式, 以及负值的<code>margin-left</code>,margin-left是width的一半;<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>:-<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用flex 布局<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><ol><li><p>设置 <code>line-height</code> 等于父元素高度: <code>.box{ height:20px;line-height :20px}</code></p></li><li><p>使用flex 布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可用 transform</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line"><span class="attribute">position</span>:relative;</span><br><span class="line">.son&#123;</span><br><span class="line">    <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span><br><span class="line">    <span class="selector-tag">top</span><span class="selector-pseudo">:50</span>%;</span><br><span class="line">    <span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(0,<span class="selector-tag">-50</span>%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用绝对定位方式, 以及负值的<code>margin-top</code>,margin-top是width的一半;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>:-<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若元素是行内块级元素, 基本思想是使用<code>display: inline-block</code>, <code>vertical-align: middle</code>和一个伪元素让内容块处于容器中央.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::after</span>, <span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="https工作原理"><a href="#https工作原理" class="headerlink" title="https工作原理"></a>https工作原理</h2><ol><li>客户端发起https连接请求</li><li>服务端收到请求后，返回公钥</li><li>客户端收到服务端发过来的公钥后，使用公钥加密随机(对称)密钥。客户端随机生成的随机(对称)密钥。</li><li>客户端向服务端发送加密过后的随机(对称)密钥，服务端收到后使用私钥解密得到随机(对称)密钥。</li><li>双方都知道随机(对称)密钥后，就可以通过对称密钥加密的密文通信。</li></ol></li></ol><h2 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h2><ol><li>white-space：用来控制空白字符的显示的，同时还能控制是否自动换行；<blockquote><p>normal 正常显示<br>nowrap 永不换行<br>pre preserve的缩写，空格和换行符全都被保留了下来！不过自动换行还是没了。<br>pre-wrap就是preserve+wrap，保留空格和换行符，且可以自动换行。<br>pre-line 空格被合并了，但是换行符可以发挥作用</p></blockquote></li><li>word-break ：控制单词如何被拆分换行的<blockquote><p>normal 正常显示<br>keep-all 所有“单词”一律不拆分换行,这里的“单词”包括连续的中文字符（还有日文、韩文等），或者可以理解为只有空格可以触发自动换行<br>break-all 所有单词碰到边界一律拆分换行</p></blockquote></li><li>word-wrap 控制单词如何被拆分换行的<blockquote><p>normal 正常显示<br>break-word 只有当一个单词一整行都显示不下时，才会拆分换行该单词</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS盒模型&quot;&gt;&lt;a href=&quot;#CSS盒模型&quot; class=&quot;headerlink&quot; title=&quot;CSS盒模型&quot;&gt;&lt;/a&gt;CSS盒模型&lt;/h2&gt;&lt;p&gt;盒模型可以分为IE盒模型（border-box)和标准盒模型(content-box);&lt;br&gt;盒模型的组成
      
    
    </summary>
    
    
    
      <category term="知识梳理" scheme="http://lawsan.xyz/tags/%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>手写源码Object.create()、instanceof</title>
    <link href="http://lawsan.xyz/2020/11/14/%E6%89%8B%E5%86%99%E6%BA%90%E7%A0%81/"/>
    <id>http://lawsan.xyz/2020/11/14/%E6%89%8B%E5%86%99%E6%BA%90%E7%A0%81/</id>
    <published>2020-11-14T08:16:41.000Z</published>
    <updated>2020-11-14T08:48:23.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h2><p>方法创建一个新对象，使用现有的对象来提供新创建的对象的<strong>proto</strong>。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = &#123;</span><br><span class="line">name:<span class="string">'parent'</span>,</span><br><span class="line">sayHi:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="built_in">Object</span>.create(parent)</span><br><span class="line"><span class="built_in">console</span>.log(son.__proto__ === parent)</span><br><span class="line">son.sayHi()<span class="comment">//'parent'</span></span><br><span class="line">son.name = <span class="string">'son'</span></span><br><span class="line">son.sayHi() <span class="comment">//'son'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCreate</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">F.prototype = obj</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>instanceof运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链</p><h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">make, model, year</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.make = make;</span><br><span class="line">  <span class="keyword">this</span>.model = model;</span><br><span class="line">  <span class="keyword">this</span>.year = year;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> auto = <span class="keyword">new</span> Car(<span class="string">'Honda'</span>, <span class="string">'Accord'</span>, <span class="number">1998</span>);</span><br><span class="line"><span class="built_in">console</span>.log(auto <span class="keyword">instanceof</span> Car);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(auto <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">//  true</span></span><br></pre></td></tr></table></figure><h3 id="手写实现"><a href="#手写实现" class="headerlink" title="手写实现"></a>手写实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myInstanceof</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line"><span class="comment">//如果是基本数据类型返回false</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> a !== <span class="string">'object'</span> || b === <span class="literal">null</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proto = a.__proto__</span><br><span class="line"><span class="comment">//开始查找</span></span><br><span class="line"><span class="keyword">while</span>(proto)&#123;</span><br><span class="line"><span class="keyword">if</span>(proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">//没找到</span></span><br><span class="line"><span class="keyword">if</span>(proto === b.prototype) <span class="keyword">return</span> <span class="literal">true</span>  <span class="comment">//找到了</span></span><br><span class="line">proto = proto.__proto__ <span class="comment">//迭代</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Object-create&quot;&gt;&lt;a href=&quot;#Object-create&quot; class=&quot;headerlink&quot; title=&quot;Object.create()&quot;&gt;&lt;/a&gt;Object.create()&lt;/h2&gt;&lt;p&gt;方法创建一个新对象，使用现有的对象来提供新创
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://lawsan.xyz/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>防抖和节流是啥？</title>
    <link href="http://lawsan.xyz/2020/11/14/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81%E6%98%AF%E5%95%A5%EF%BC%9F/"/>
    <id>http://lawsan.xyz/2020/11/14/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81%E6%98%AF%E5%95%A5%EF%BC%9F/</id>
    <published>2020-11-14T02:57:34.000Z</published>
    <updated>2020-11-14T07:58:00.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始计时。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn,wait</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">timer &amp;&amp; clearTimeout(timer)  <span class="comment">//一定时间段内重复触发，重新计时</span></span><br><span class="line">timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">fn()</span><br><span class="line">&#125;,wait)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random())</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>,debounce(handle,<span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>当持续触发事件时，保证一定时间段内只调用一次事件处理函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,delay</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">true</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!timer) <span class="keyword">return</span>; <span class="comment">//已经在计时了，不必重复操作</span></span><br><span class="line">timer = <span class="literal">false</span>      <span class="comment">//计时开始</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">fn()</span><br><span class="line">timer = <span class="literal">true</span> <span class="comment">//一次流程完成</span></span><br><span class="line">&#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random())</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>,throttle(handle,<span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h2 id="防抖-节流"><a href="#防抖-节流" class="headerlink" title="防抖+节流"></a>防抖+节流</h2><p>防抖有时候因为触发太过频繁，导致一次响应都没有，所以希望固定的时间必定给用户一个响应，于是就有了防抖 + 节流的操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> last = <span class="number">0</span>, timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">//时间不到，防抖</span></span><br><span class="line"><span class="keyword">if</span> (now - last &lt; delay)&#123;</span><br><span class="line">  clearTimeout(timer);</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">last = now;</span><br><span class="line">fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">  &#125;, delay);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 这个时候表示时间到了，必须给响应</span></span><br><span class="line">  last = now;</span><br><span class="line">  fn.apply(<span class="keyword">this</span>, args);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;防抖&quot;&gt;&lt;a href=&quot;#防抖&quot; class=&quot;headerlink&quot; title=&quot;防抖&quot;&gt;&lt;/a&gt;防抖&lt;/h2&gt;&lt;p&gt;当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始计时。&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://lawsan.xyz/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中call、apply和bind以及手写它们</title>
    <link href="http://lawsan.xyz/2020/11/13/call%E5%92%8Capply%E5%92%8Cbind/"/>
    <id>http://lawsan.xyz/2020/11/13/call%E5%92%8Capply%E5%92%8Cbind/</id>
    <published>2020-11-13T11:06:54.000Z</published>
    <updated>2020-11-13T11:23:29.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>call、apply、bind都是用来改变函数的this的指向；<br>call、apply、bind三者第一个参数都是this要指向的对象，也就是想指定的上下文；<br>call、apply、bind三者都可以利用后续参数传参；<br>bind是返回对应函数，便于稍后调用；apply、call则是立即调用 ；<br>call 需要把参数按顺序传递进去，而 apply 则是把参数放在数组里；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'zhangsan'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = &#123;<span class="attr">name</span>:<span class="string">'lisi'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">name:<span class="string">'wangwu'</span>,</span><br><span class="line">sayName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.sayName() <span class="comment">//wangwu</span></span><br><span class="line">obj.sayName.call(a) <span class="comment">//zhangsan</span></span><br><span class="line">obj.sayName.apply(b) <span class="comment">//lisi</span></span><br><span class="line">obj.sayName.bind(b)() <span class="comment">//lisi</span></span><br></pre></td></tr></table></figure><h2 id="手写call、apply、bind"><a href="#手写call、apply、bind" class="headerlink" title="手写call、apply、bind"></a>手写call、apply、bind</h2><p>实现原理都是通过对象属性的方法绑定该函数，通过对象调用方法来改<code>this</code>,bind返回一个函数即可；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params">context,...args</span>) </span>&#123;</span><br><span class="line">context.fn = <span class="keyword">this</span> <span class="comment">//函数保存为context.fn</span></span><br><span class="line"><span class="keyword">const</span> result = context.fn(args)</span><br><span class="line"><span class="keyword">delete</span> context.fn</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span>(<span class="params">context,args</span>) </span>&#123;</span><br><span class="line">context.fn = <span class="keyword">this</span> <span class="comment">//函数保存为context.fn</span></span><br><span class="line"><span class="keyword">const</span> result =(args &amp;&amp; args.length)? context.fn(args) : context.fn()</span><br><span class="line"><span class="keyword">delete</span> context.fn</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span>(<span class="params">context,...args</span>) </span>&#123;</span><br><span class="line">context.fn = <span class="keyword">this</span> <span class="comment">//函数保存为context.fn</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">const</span> newArgs = args.concat(...arguments)</span><br><span class="line"><span class="keyword">const</span> result = context.fn(args)</span><br><span class="line"><span class="keyword">delete</span> context.fn</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;p&gt;call、apply、bind都是用来改变函数的this的指向；&lt;br&gt;call、apply、bind三者第一个参数都是this要指向的对象
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://lawsan.xyz/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>记一次抓包翻车现场</title>
    <link href="http://lawsan.xyz/2020/09/29/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%8A%93%E5%8C%85%E7%BF%BB%E8%BD%A6%E7%8E%B0%E5%9C%BA/"/>
    <id>http://lawsan.xyz/2020/09/29/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%8A%93%E5%8C%85%E7%BF%BB%E8%BD%A6%E7%8E%B0%E5%9C%BA/</id>
    <published>2020-09-29T05:54:49.000Z</published>
    <updated>2020-09-29T06:16:09.802Z</updated>
    
    <content type="html"><![CDATA[<p>本来想通过抓取学小易的接口来进行查题，没想到抓取成功后，搜的第二道题，学小易就把我账号给封掉了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/emotion/%E6%88%91%E7%89%B9%E4%B9%88.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="抓包工具准备"><a href="#抓包工具准备" class="headerlink" title="抓包工具准备"></a>抓包工具准备</h3><ol><li>一部已经root的手机</li><li>抓包软件httpCanary<h3 id="通过httpCanary抓取API"><a href="#通过httpCanary抓取API" class="headerlink" title="通过httpCanary抓取API"></a>通过httpCanary抓取API</h3>登陆接口 :<code>https://app.51xuexiaoyi.com/api/v1/login</code>,会获取到<code>api_token</code>,查题需要。<br>查题接口 :<code>https://app.51xuexiaoyi.com/api/v1/searchQuestion</code><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3></li><li>node环境</li><li>下载依赖 <code>npm i request request-promise-native -S</code></li><li>运行 <code>node index.js</code><h3 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h3>配置文件<code>config.js</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">    <span class="string">'app-version'</span>:<span class="string">'1.0.6'</span>,</span><br><span class="line">    platform:<span class="string">'android'</span>,</span><br><span class="line">    device:<span class="string">'AkUmMFxRuen3SjFGi16BsRmFHoXUHa8Gq1KwDDlOSIw2'</span>,</span><br><span class="line">    <span class="string">'user-agent'</span>:<span class="string">'okhttp/3.11.0'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    login:&#123;</span><br><span class="line">        URI:<span class="string">'https://app.51xuexiaoyi.com/api/v1/login'</span>,</span><br><span class="line">        headers:&#123;</span><br><span class="line">            device:App.device,</span><br><span class="line">            platform:App.platform,</span><br><span class="line">            <span class="string">'app-version'</span>:App[<span class="string">'app-version'</span>],</span><br><span class="line">            <span class="string">'user-agent'</span>:App[<span class="string">'user-agent'</span>],</span><br><span class="line">            <span class="string">'content-type'</span>:<span class="string">'application/json;charset=utf-8'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    searchQuestion:&#123;</span><br><span class="line">        URI:<span class="string">'https://app.51xuexiaoyi.com/api/v1/searchQuestion'</span>,</span><br><span class="line">        headers:&#123;</span><br><span class="line">            device:App.device,</span><br><span class="line">            platform:App.platform,</span><br><span class="line">            <span class="string">'app-version'</span>:App[<span class="string">'app-version'</span>],</span><br><span class="line">            <span class="string">'user-agent'</span>:App[<span class="string">'user-agent'</span>],</span><br><span class="line">            <span class="string">'content-type'</span>:<span class="string">'application/json;charset=utf-8'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>主要的查题程序<code>searchQuestion.js</code><br>登陆函数天自己的账号和密码即可。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Rp = <span class="built_in">require</span>(<span class="string">'request-promise-native'</span>)</span><br><span class="line"><span class="keyword">const</span> Config = <span class="built_in">require</span>(<span class="string">'./config'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 登陆</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> options = &#123;<span class="attr">method</span>:<span class="string">'POST'</span>,<span class="attr">uri</span>:Config.login.URI,<span class="attr">body</span>:&#123;<span class="string">'username'</span>:<span class="string">'XXXXXX'</span>,<span class="string">'password'</span>:<span class="string">'XXXXXX'</span>&#125;,<span class="attr">headers</span>:Config.login.headers,<span class="attr">json</span>: <span class="literal">true</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> Rp(options)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//搜题</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">searchQuestion</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> apiToken = <span class="built_in">JSON</span>.parse(fs.readFileSync(<span class="string">'./token.txt'</span>,<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">const</span> options = &#123;<span class="attr">method</span>:<span class="string">'POST'</span>,<span class="attr">uri</span>:Config.searchQuestion.URI,<span class="attr">body</span>:&#123;<span class="string">'keyword'</span>:question&#125;,<span class="attr">headers</span>:Config.searchQuestion.headers,<span class="attr">json</span>: <span class="literal">true</span>&#125;</span><br><span class="line">    options.headers.token = apiToken.api_token</span><br><span class="line">    options.headers.t = <span class="built_in">String</span>(<span class="built_in">Date</span>.now())</span><br><span class="line">    <span class="keyword">return</span> Rp(options)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存token，不用每次都登陆请求</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">saveToken</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> loginResult = <span class="keyword">await</span> login()</span><br><span class="line">    <span class="keyword">if</span>(loginResult.code == <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(getTime() + <span class="string">'===&gt;'</span> +<span class="string">"token保存成功"</span>)</span><br><span class="line">        fs.writeFileSync(<span class="string">'./token.txt'</span>,<span class="built_in">JSON</span>.stringify(loginResult.data),<span class="string">'utf-8'</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(getTime() + <span class="string">'===&gt;'</span> +<span class="string">"token保存失败"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定时更新 token</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">updateToken</span>(<span class="params">isRun,time</span>)</span>&#123;</span><br><span class="line">    isRun &amp;&amp; <span class="keyword">await</span> saveToken()</span><br><span class="line">    setInterval(<span class="keyword">async</span>()=&gt;&#123;</span><br><span class="line">        <span class="keyword">await</span> saveToken()</span><br><span class="line">    &#125;,time)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当前时间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTime</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">const</span> y = d.getFullYear()</span><br><span class="line">    <span class="keyword">const</span> m = <span class="built_in">String</span>(d.getMonth() + <span class="number">1</span>).padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span><br><span class="line">    <span class="keyword">const</span> da = <span class="built_in">String</span>(d.getDate()).padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span><br><span class="line">    <span class="keyword">const</span> h = <span class="built_in">String</span>(d.getHours()).padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span><br><span class="line">    <span class="keyword">const</span> f = <span class="built_in">String</span>(d.getMinutes()).padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span><br><span class="line">    <span class="keyword">const</span> s = <span class="built_in">String</span>(d.getSeconds()).padStart(<span class="number">2</span>,<span class="string">'0'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;da&#125;</span> <span class="subst">$&#123;h&#125;</span>:<span class="subst">$&#123;f&#125;</span>:<span class="subst">$&#123;s&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">     updateToken,</span><br><span class="line">     searchQuestion</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>主程序<code>main.js</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;updateToken,searchQuestion&#125; = <span class="built_in">require</span>(<span class="string">'./searchQuestion'</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">await</span> updateToken(<span class="literal">true</span>,<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>)</span><br><span class="line">   <span class="keyword">let</span> s = <span class="keyword">await</span> searchQuestion(<span class="string">'中国辛亥革命'</span>)</span><br><span class="line">   <span class="built_in">console</span>.log(s)</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>运行结果：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/Sep/29/s1.JPG" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/Sep/29/s2.JPG" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ol><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>可惜了，账号被封掉了。进度被打断。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/emotion/%E7%86%8A%E7%8C%AB%E4%BA%BA%E5%93%AD.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本来想通过抓取学小易的接口来进行查题，没想到抓取成功后，搜的第二道题，学小易就把我账号给封掉了。&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
           
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>200多行代码带你实现一个简单Vue</title>
    <link href="http://lawsan.xyz/2020/08/15/200%E5%A4%9A%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%B8%A6%E4%BD%A0%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAVue/"/>
    <id>http://lawsan.xyz/2020/08/15/200%E5%A4%9A%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%B8%A6%E4%BD%A0%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAVue/</id>
    <published>2020-08-15T10:45:29.000Z</published>
    <updated>2020-08-15T11:37:16.250Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道Vue是响应式的，Vue就是基于<code>数据劫持+发布者-订阅者模式</code>实现的数据响应式，数据变化驱动视图更新，而通过操作视图也能改变数据。<br>数据劫持是通过<code>Object.defineProperty</code>把Vue中的data转化成<code>getter</code>和<code>setter</code>实现，ES6中也有<code>Proxy</code>对数据进行拦截处理。<br>首先来着一个图，大概总结一个流程。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/Aug/15/%E6%89%8B%E5%86%99vue.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="代码开始"><a href="#代码开始" class="headerlink" title="代码开始"></a>代码开始</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyVue</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(options)&#123;</span><br><span class="line"><span class="keyword">this</span>.$el = options.el</span><br><span class="line"><span class="keyword">this</span>.$data = options.data</span><br><span class="line"><span class="keyword">this</span>.$options = options</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.$el)&#123;</span><br><span class="line"><span class="comment">//数据劫持-发布者+订阅者</span></span><br><span class="line"><span class="keyword">new</span> Observer(<span class="keyword">this</span>.$data)</span><br><span class="line"><span class="comment">//编译模板</span></span><br><span class="line"><span class="keyword">new</span> Compile(<span class="keyword">this</span>.$el,<span class="keyword">this</span>)</span><br><span class="line"><span class="comment">//数据代理 可通过 this.person 直接访问数据</span></span><br><span class="line"><span class="keyword">this</span>.proxyData(<span class="keyword">this</span>.$data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">proxyData(data)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> data)&#123;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>,key,&#123;</span><br><span class="line"><span class="keyword">get</span>()&#123;</span><br><span class="line"><span class="keyword">return</span> data[key]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">set</span>(newVal)&#123;</span><br><span class="line">data[key] = newVal</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数据响应式：<br>对data的所有数据进行劫持，转化为<code>getter</code>和<code>setter</code>。</li><li>模板编译<br>模板解析，处理指令和事件绑定，比如<code></code>,<code>v-text=&quot;msg&quot;</code>,<code>v-on:click=&quot;handler&quot;</code></li><li>数据双向绑定与数据代理<br><code>v-model</code> 实现；数据代理实现<h2 id="数据响应式"><a href="#数据响应式" class="headerlink" title="数据响应式"></a>数据响应式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(data)&#123;</span><br><span class="line"><span class="keyword">this</span>.observe(data)</span><br><span class="line">&#125;</span><br><span class="line">observe(data)&#123;</span><br><span class="line"><span class="keyword">if</span>(data &amp;&amp; <span class="keyword">typeof</span> data === <span class="string">'object'</span>)&#123;</span><br><span class="line"><span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.defineReactive(data,key,data[key])</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">defineReactive(obj,key,value)&#123;</span><br><span class="line"><span class="comment">//递归遍历</span></span><br><span class="line"><span class="keyword">this</span>.observe(value)</span><br><span class="line"><span class="comment">//创建依赖</span></span><br><span class="line"><span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,key,&#123;</span><br><span class="line">configurable:<span class="literal">true</span>,</span><br><span class="line">enumerbale:<span class="literal">true</span>,</span><br><span class="line"><span class="keyword">get</span>()&#123;</span><br><span class="line"><span class="comment">//模板编译的时候会取数据时会创建Watcher 然后收集进dep中</span></span><br><span class="line">Dep.target &amp;&amp; dep.addSub(Dep.target)</span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">set</span>:(newVal)=&gt;&#123;</span><br><span class="line"><span class="comment">//重新监听新值,解决对属性赋值时监听不到的问题 如 this.$data.person = &#123;a:1&#125;</span></span><br><span class="line"><span class="keyword">this</span>.observe(newVal)</span><br><span class="line"><span class="keyword">if</span>(newVal !== value)&#123;</span><br><span class="line">value = newVal</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据修改时,通知订阅者,更新视图</span></span><br><span class="line">dep.notify()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.subs = []</span><br><span class="line">&#125;</span><br><span class="line">addSub(watcher)&#123;</span><br><span class="line"><span class="keyword">this</span>.subs.push(watcher)</span><br><span class="line">&#125;</span><br><span class="line">notify()&#123;</span><br><span class="line"><span class="keyword">this</span>.subs.forEach(<span class="function"><span class="params">w</span>=&gt;</span>w.update())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(vm,expr,cb) &#123;</span><br><span class="line">    <span class="keyword">this</span>.vm = vm</span><br><span class="line"><span class="keyword">this</span>.expr = expr</span><br><span class="line"><span class="keyword">this</span>.cb = cb</span><br><span class="line"><span class="keyword">this</span>.oldVal = <span class="keyword">this</span>.getOldVal()</span><br><span class="line">&#125;</span><br><span class="line">getOldVal()&#123;</span><br><span class="line"><span class="comment">//依赖</span></span><br><span class="line">Dep.target = <span class="keyword">this</span></span><br><span class="line"><span class="keyword">const</span> oldVal = compileUtil.getVal(<span class="keyword">this</span>.expr,<span class="keyword">this</span>.vm)</span><br><span class="line">Dep.target = <span class="literal">null</span></span><br><span class="line"><span class="keyword">return</span> oldVal</span><br><span class="line">&#125;</span><br><span class="line">update()&#123;</span><br><span class="line"><span class="keyword">const</span> newVal = compileUtil.getVal(<span class="keyword">this</span>.expr,<span class="keyword">this</span>.vm)</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.oldVal !== newVal)&#123;</span><br><span class="line"><span class="comment">//数据变化,回调更新视图</span></span><br><span class="line"><span class="keyword">this</span>.cb(newVal)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>数据响应式实现了啥？</li></ul><ol><li>对数据进行劫持</li><li>对依赖收集</li><li>数据变化,回调更新<h2 id="模板编译"><a href="#模板编译" class="headerlink" title="模板编译"></a>模板编译</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compile</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(el,vm)&#123;</span><br><span class="line"><span class="comment">//判断是否为元素节点,否则获取</span></span><br><span class="line"><span class="keyword">this</span>.el = <span class="keyword">this</span>.isElementNode(el) ? el : <span class="built_in">document</span>.querySelector(el)</span><br><span class="line"><span class="keyword">this</span>.vm = vm</span><br><span class="line"><span class="comment">//获取文档碎片对象,减少页面的回流和重绘</span></span><br><span class="line"><span class="keyword">const</span> fragment = <span class="keyword">this</span>.node2Fragment(<span class="keyword">this</span>.el)</span><br><span class="line"><span class="comment">//编译模板</span></span><br><span class="line"><span class="keyword">this</span>.compile(fragment)</span><br><span class="line"><span class="comment">//追加到#app上</span></span><br><span class="line"><span class="keyword">this</span>.el.appendChild(fragment)</span><br><span class="line">&#125;</span><br><span class="line">isElementNode(node)&#123;</span><br><span class="line"><span class="keyword">return</span> node.nodeType === <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">node2Fragment(el)&#123;</span><br><span class="line"><span class="keyword">const</span> f = <span class="built_in">document</span>.createDocumentFragment()</span><br><span class="line"><span class="keyword">let</span> firstChild</span><br><span class="line"><span class="keyword">while</span>(firstChild = el.firstChild)&#123;</span><br><span class="line">f.appendChild(firstChild)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f</span><br><span class="line">&#125;</span><br><span class="line">compile(fragment)&#123;</span><br><span class="line"><span class="keyword">const</span> childNodes = fragment.childNodes</span><br><span class="line">;[...childNodes].forEach(<span class="function"><span class="params">child</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.isElementNode(child))&#123;</span><br><span class="line"><span class="comment">//元素节点</span></span><br><span class="line"><span class="keyword">this</span>.compileElement(child)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//文本节点</span></span><br><span class="line"><span class="keyword">this</span>.compileText(child)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归遍历子节点</span></span><br><span class="line"><span class="keyword">if</span>(child.childNodes &amp;&amp; child.childNodes.length)&#123;</span><br><span class="line"><span class="keyword">this</span>.compile(child)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">compileElement(node)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> attrs = node.attributes</span><br><span class="line">;[ ...attrs].forEach(<span class="function"><span class="params">attr</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//取出名和其值,v-html = 'htmlStr' , v-on:click='handler'</span></span><br><span class="line"><span class="keyword">const</span> &#123;name,value&#125; = attr</span><br><span class="line"><span class="comment">//是否为指令</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.isDirective(name))&#123;</span><br><span class="line"><span class="keyword">const</span> [ ,directive] = name.split(<span class="string">'-'</span>) <span class="comment">//分离出指令名,text,html,on,model</span></span><br><span class="line"><span class="keyword">const</span> [dirName,eventName] = directive.split(<span class="string">':'</span>) <span class="comment">//分离出事件名[html,undefined] [on,click]</span></span><br><span class="line"><span class="comment">// console.log(dirName,eventName)</span></span><br><span class="line"><span class="comment">//value 为 expr 也就是 htmlStr/person.name/person.age</span></span><br><span class="line">compileUtil[dirName](node,value,<span class="keyword">this</span>.vm,eventName)</span><br><span class="line"><span class="comment">//删除标签上的指令属性</span></span><br><span class="line">node.removeAttribute(<span class="string">'v-'</span>+directive)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.isShortOn(name))&#123;</span><br><span class="line"><span class="keyword">let</span> [,eventName] = name.split(<span class="string">'@'</span>)</span><br><span class="line">compileUtil[<span class="string">'on'</span>](node,value,<span class="keyword">this</span>.vm,eventName)</span><br><span class="line">node.removeAttribute(<span class="string">'@'</span>+eventName)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.isShortBind(name))&#123;</span><br><span class="line"><span class="keyword">let</span> [,eventName] = name.split(<span class="string">':'</span>)</span><br><span class="line">compileUtil[<span class="string">'bind'</span>](node,value,<span class="keyword">this</span>.vm,eventName)</span><br><span class="line">node.removeAttribute(<span class="string">':'</span>+eventName)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">compileText(node)&#123;</span><br><span class="line"><span class="keyword">const</span> content = node.textContent</span><br><span class="line"><span class="comment">//检测是否有 &#123;&#123;msg&#125;&#125;此类指令</span></span><br><span class="line"><span class="keyword">if</span>(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/</span>.test(content))&#123;</span><br><span class="line">compileUtil[<span class="string">'text'</span>](node,content,<span class="keyword">this</span>.vm)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">isDirective(name)&#123;</span><br><span class="line"><span class="comment">//是否以 v-开头</span></span><br><span class="line"><span class="keyword">return</span> name.startsWith(<span class="string">'v-'</span>)</span><br><span class="line">&#125;</span><br><span class="line">isShortOn(name)&#123;</span><br><span class="line"><span class="comment">//是否以 @开头</span></span><br><span class="line"><span class="keyword">return</span> name.startsWith(<span class="string">'@'</span>)</span><br><span class="line">&#125;</span><br><span class="line">isShortBind(name)&#123;</span><br><span class="line"><span class="comment">//是否以 :开头</span></span><br><span class="line"><span class="keyword">return</span> name.startsWith(<span class="string">':'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译工具对象</span></span><br><span class="line"><span class="keyword">const</span> compileUtil = &#123;</span><br><span class="line">text(node,expr,vm)&#123;</span><br><span class="line"><span class="keyword">let</span> value</span><br><span class="line"><span class="keyword">if</span>(expr.indexOf(<span class="string">'&#123;&#123;'</span>) !== <span class="number">-1</span>)&#123;</span><br><span class="line">value = expr.replace(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>,(...args)=&gt;&#123;</span><br><span class="line"><span class="keyword">new</span> Watcher(vm,args[<span class="number">1</span>],(newVal)=&gt;&#123;</span><br><span class="line"><span class="keyword">this</span>.updater.textUpdate(node,<span class="keyword">this</span>.getContentVal(expr,vm))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.getVal(args[<span class="number">1</span>],vm)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">value = <span class="keyword">this</span>.getVal(expr,vm)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.updater.textUpdate(node,value)</span><br><span class="line">&#125;,</span><br><span class="line">html(node,expr,vm)&#123;</span><br><span class="line"><span class="keyword">const</span> value = <span class="keyword">this</span>.getVal(expr,vm)</span><br><span class="line"><span class="keyword">new</span> Watcher(vm,expr,(newVal)=&gt;&#123;</span><br><span class="line"><span class="keyword">this</span>.updater.htmlUpdate(node,newVal)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.updater.htmlUpdate(node,value)</span><br><span class="line">&#125;,</span><br><span class="line">model(node,expr,vm)&#123;</span><br><span class="line"><span class="keyword">const</span> value = <span class="keyword">this</span>.getVal(expr,vm)</span><br><span class="line"><span class="keyword">new</span> Watcher(vm,expr,(newVal)=&gt;&#123;</span><br><span class="line"><span class="keyword">this</span>.updater.modelUpdate(node,newVal)</span><br><span class="line">&#125;)</span><br><span class="line">node.addEventListener(<span class="string">'input'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="keyword">this</span>.setVal(vm,expr,e.target.value)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.updater.modelUpdate(node,value)</span><br><span class="line">&#125;,</span><br><span class="line">on(node,expr,vm,eventName)&#123;</span><br><span class="line"><span class="keyword">let</span> fn = vm.$options.methods &amp;&amp; vm.$options.methods[expr];</span><br><span class="line"><span class="comment">//绑定事件</span></span><br><span class="line">node.addEventListener(eventName,fn.bind(vm),<span class="literal">false</span>)</span><br><span class="line">&#125;,</span><br><span class="line">bind(node,expr,vm,propertyName)&#123;</span><br><span class="line"><span class="keyword">const</span> value = <span class="keyword">this</span>.getVal(expr,vm)</span><br><span class="line"><span class="keyword">new</span> Watcher(vm,expr,(newVal)=&gt;&#123;</span><br><span class="line"><span class="keyword">this</span>.updater.bindUpdate(node,propertyName,newVal)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.updater.bindUpdate(node,propertyName,value)</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">updater:&#123;</span><br><span class="line">textUpdate(node,value)&#123;</span><br><span class="line">node.textContent = value</span><br><span class="line">&#125;,</span><br><span class="line">htmlUpdate(node,value)&#123;</span><br><span class="line">node.innerHTML = value</span><br><span class="line">&#125;,</span><br><span class="line">modelUpdate(node,value)&#123;</span><br><span class="line">node.value = value</span><br><span class="line">&#125;,</span><br><span class="line">bindUpdate(node,propertyName,value)&#123;</span><br><span class="line">node.setAttribute(propertyName,value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">getVal(expr,vm)&#123;</span><br><span class="line"><span class="keyword">return</span> expr.split(<span class="string">'.'</span>).reduce(<span class="function">(<span class="params">data,currentVal</span>)=&gt;</span>data[currentVal],vm.$data)</span><br><span class="line">&#125;,</span><br><span class="line">getContentVal(expr,vm)&#123;</span><br><span class="line"><span class="keyword">return</span> value = expr.replace(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>,(...args)=&gt;&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.getVal(args[<span class="number">1</span>],vm)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">setVal(vm,expr,inputVal)&#123;</span><br><span class="line"><span class="keyword">return</span> expr.split(<span class="string">'.'</span>).reduce(<span class="function">(<span class="params">data,currentVal</span>)=&gt;</span>&#123;</span><br><span class="line">data[currentVal] = inputVal</span><br><span class="line">&#125;,vm.$data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>模板编译实现了啥？</li></ul><ol><li>对模板中的指令、语法进行解析赋值，绑定事件</li><li>对每个使用了<code>data</code>中的数据添加一个<code>Watcher</code>（观察者）</li><li>在模板编译赋值的过程中会取值，就会触发<code>data</code>中的<code>getter</code>，这时也就会把<code>Watcher</code> push进dep(收集依赖的容器)中。</li><li>一个旦有数据变化，就会触发<code>data</code>中的<code>setter</code>，从而会触发<code>dep.notify</code>通知所有<code>watcher</code>更新,从而驱动视图更新。</li><li>双向数据绑定，无非就是对表单添加事件<code>input</code>，<code>onchange</code>等<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><a href="https://gitee.com/chuan8905/codes/wenmtgu3p27y4caobjr5v46" target="_blank" rel="noopener">完整代码</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们都知道Vue是响应式的，Vue就是基于&lt;code&gt;数据劫持+发布者-订阅者模式&lt;/code&gt;实现的数据响应式，数据变化驱动视图更新，而通过操作视图也能改变数据。&lt;br&gt;数据劫持是通过&lt;code&gt;Object.defineProperty&lt;/code&gt;把Vue中的data
      
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://lawsan.xyz/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>页面布局之flex布局</title>
    <link href="http://lawsan.xyz/2020/07/31/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%B9%8Bflex%E5%B8%83%E5%B1%80/"/>
    <id>http://lawsan.xyz/2020/07/31/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%B9%8Bflex%E5%B8%83%E5%B1%80/</id>
    <published>2020-07-31T01:58:10.000Z</published>
    <updated>2020-07-31T02:21:38.009Z</updated>
    
    <content type="html"><![CDATA[<p>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p><h3 id="Flex布局是什么？"><a href="#Flex布局是什么？" class="headerlink" title="Flex布局是什么？"></a>Flex布局是什么？</h3><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为 Flex 布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行内元素也可以使用 Flex 布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Webkit 内核的浏览器，必须加上<code>-webkit</code>前缀。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</p></blockquote><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content<h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。<h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>nowrap（默认）：不换行。</li><li>wrap：换行，第一行在上方。</li><li>wrap-reverse：换行，第一行在下方。<h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><code>justify-content</code>属性定义了项目在主轴上的对齐方式。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。<h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><code>align-items</code>属性定义项目在交叉轴上如何对齐。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。<h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h4><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。<h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3></li><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self<h4 id="order属性"><a href="#order属性" class="headerlink" title="order属性"></a>order属性</h4><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flex-grow属性"><a href="#flex-grow属性" class="headerlink" title="flex-grow属性"></a>flex-grow属性</h4><code>flex-grow</code>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。<h4 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a>flex-shrink属性</h4><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。<h4 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h4><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（<code>main size</code>）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。<h4 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h4><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为0 1 auto。<code>后两个属性可选</code>。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>该属性有两个快捷值：<code>auto (1 1 auto)</code> 和 <code>none (0 0 auto)</code>。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。<h4 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h4><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>该属性可能取6个值，除了<code>auto</code>，其他都与<code>align-items</code>属性完全一致。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。&lt;/p&gt;
&lt;h3 id=&quot;Flex布局是什么？&quot;&gt;&lt;a href=&quot;#Flex布局是什么？&quot; cl
      
    
    </summary>
    
    
    
      <category term="页面布局" scheme="http://lawsan.xyz/tags/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>页面布局之Grid布局</title>
    <link href="http://lawsan.xyz/2020/07/29/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%B9%8BGrid%E5%B8%83%E5%B1%80/"/>
    <id>http://lawsan.xyz/2020/07/29/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%B9%8BGrid%E5%B8%83%E5%B1%80/</id>
    <published>2020-07-29T07:24:02.000Z</published>
    <updated>2020-07-29T10:12:41.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Grid布局"><a href="#Grid布局" class="headerlink" title="Grid布局"></a>Grid布局</h2><h3 id="Grid布局是什么？"><a href="#Grid布局是什么？" class="headerlink" title="Grid布局是什么？"></a>Grid布局是什么？</h3><p>网格布局（Grid）是最强大的 CSS 布局方案。是一种新的 CSS 布局模型，比较擅长将一个页面划分为几个主要区域，以及定义这些区域的大小、位置、层次等关系。号称是最强大的的 CSS 布局方案，是目前唯一一种 CSS 二维布局。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/29/grid-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Grid布局与Flex布局"><a href="#Grid布局与Flex布局" class="headerlink" title="Grid布局与Flex布局"></a>Grid布局与Flex布局</h3><p>Flex 布局是轴线布局，只能指定”项目”针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成”行”和”列”，产生单元格，然后指定”项目所在”的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。<br>flex布局示例：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/29/flex-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Grid布局示例：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/29/grid-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="容器与项目"><a href="#容器与项目" class="headerlink" title="容器与项目"></a>容器与项目</h4><p>采用网格布局的区域，称为”容器”（container）。容器内部采用网格定位的子元素，称为”项目”（item）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，最外层的<code>&lt;div&gt;</code>元素就是容器，内层的三个<code>&lt;div&gt;</code>元素就是项目。<br>注意：项目只能是容器的顶层子元素，不包含项目的子元素，比如上面代码的<code>&lt;p</code>&gt;元素就不是项目。<code>Grid 布局只对项目生效</code>。</p><h4 id="行与列"><a href="#行与列" class="headerlink" title="行与列"></a>行与列</h4><p>容器里面的水平区域称为”行”（row），垂直区域称为”列”（column）。</p><h4 id="单元格"><a href="#单元格" class="headerlink" title="单元格"></a>单元格</h4><p>行和列的交叉区域，称为”单元格”（cell）。正常情况下，n行和m列会产生n x m个单元格。比如，3行3列会产生9个单元格。</p><h4 id="网格线"><a href="#网格线" class="headerlink" title="网格线"></a>网格线</h4><p>划分网格的线，称为”网格线”（grid line）。水平网格线划分出行，垂直网格线划分出列。正常情况下，n行有n + 1根水平网格线，m列有m + 1根垂直网格线，比如三行就有四根水平网格线。如一个 4 x 4 的网格，共有5根水平网格线和5根垂直网格线。</p><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><h4 id="display-属性"><a href="#display-属性" class="headerlink" title="display 属性"></a>display 属性</h4><p><code>display: grid</code>指定一个容器采用网格布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/29/grid-3.JPG" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>默认情况下，容器元素都是块级元素，但也可以设成行内元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:inline-grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/29/grid-4.JPG" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上图是<code>display: inline-grid</code>的效果。<br><a href="https://codepen.io/chuanv/pen/eYJaaoO" target="_blank" rel="noopener">演示地址</a></p><blockquote><p>注意，设为网格布局以后，容器子元素（项目）的<code>float</code>、<code>display: inline-block</code>、<code>display: table-cell</code>、<code>vertical-align</code>和<code>column-*</code>等设置都将失效。</p></blockquote><h4 id="grid-template-columns-属性和-grid-template-rows-属性"><a href="#grid-template-columns-属性和-grid-template-rows-属性" class="headerlink" title="grid-template-columns 属性和 grid-template-rows 属性"></a>grid-template-columns 属性和 grid-template-rows 属性</h4><p><code>grid-template-columns</code> 属性设置列宽，<code>grid-template-rows</code> 属性设置行高。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>&#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>:<span class="number">200px</span> <span class="number">200px</span> <span class="number">200px</span>; <span class="comment">/*等价于下面的代码 */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">200px</span>); <span class="comment">/*200px 200px 200px 的简写 */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">50px</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了使用绝对单位，也可以使用百分比</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>repeat()</strong>:有时候，重复写同样的值非常麻烦，尤其网格很多时。这时，可以使用<code>repeat()</code>函数，简化重复的值。接受两个参数，第一个参数是重复的次数，第二个参数是所要重复的值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">33.33%</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">33.33%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>auto-fill</strong>:有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用<code>auto-fill</code>关键字表示自动填充。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:grid;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">200px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">50px</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/29/grid-5.JPG" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>效果如上图，会自动填充直到容器不能放置更多的列。</p></li><li><p><strong>fr</strong>:为了方便表示比例关系，网格布局提供了fr关键字（fraction 的缩写，意为”片段”）。如果两列的宽度分别为<code>1fr</code>和<code>2fr</code>，就表示后者是前者的两倍。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fr</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:grid;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">50px</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/29/grid-6.JPG" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>效果如上图，800px分为第一列200px，剩下的600px分3份，第二列1份也就是200px，第三列2份也就是400px。</p></li><li><p><strong>minmax()</strong>：minmax()函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-template-columns</span>: 1<span class="selector-tag">fr</span> 1<span class="selector-tag">fr</span> <span class="selector-tag">minmax</span>(100<span class="selector-tag">px</span>, 1<span class="selector-tag">fr</span>);</span><br></pre></td></tr></table></figure><p>上面代码中，minmax(100px, 1fr)表示列宽不小于100px，不大于1fr。</p></li><li><p><strong>auto</strong>:auto关键字表示由浏览器自己决定长度。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-template-columns</span>: 100<span class="selector-tag">px</span> <span class="selector-tag">auto</span> 100<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p>上面代码中，第二列的宽度，基本上等于该列单元格的最大宽度，除非单元格内容设置了min-width，且这个值大于最大宽度。<br><a href="https://codepen.io/chuanv/pen/KKVLjGd" target="_blank" rel="noopener">演示地址</a></p><h4 id="grid-row-gap-属性，grid-column-gap-属性，grid-gap-属性"><a href="#grid-row-gap-属性，grid-column-gap-属性，grid-gap-属性" class="headerlink" title="grid-row-gap 属性，grid-column-gap 属性，grid-gap 属性"></a>grid-row-gap 属性，grid-column-gap 属性，grid-gap 属性</h4></li><li><p><code>grid-row-gap</code>属性设置行与行的间隔（行间距），<code>grid-column-gap</code>属性设置列与列的间隔（列间距）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>&#123;</span><br><span class="line">  <span class="attribute">grid-row-gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">grid-column-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/29/grid-7.JPG" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p><code>grid-gap</code>属性是<code>grid-row-gap</code>和<code>grid-column-gap</code>的合并简写形式，语法如下。<br>上面的代码相当于</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>&#123;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span> <span class="number">20px</span>; <span class="comment">/*行高 列高 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://codepen.io/chuanv/pen/bGEyPZb" target="_blank" rel="noopener">演示地址</a></p><h4 id="grid-template-areas-属性"><a href="#grid-template-areas-属性" class="headerlink" title="grid-template-areas 属性"></a>grid-template-areas 属性</h4><p><code>grid-template-areas</code> 属性用于定义区域，一个区域由一个或者多个单元格组成一般这个属性跟网格元素的 <code>grid-area</code> 一起使用，我们在这里一起介绍。 <code>grid-area</code>属性指定项目放在哪一个区域</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">120px</span>  <span class="number">120px</span>  <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">". header  header"</span></span><br><span class="line">    <span class="string">"sidebar content content"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码表示划分出 6 个单元格，其中值得注意的是<code>.</code>符号代表空的单元格，也就是没有用到该单元格。同名的单元格会合并，如上面的<code>header</code>，<code>content</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: sidebar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: header;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码表示将类 <code>.sidebar</code> <code>.content</code> <code>.header</code>所在的元素放在上面 <code>grid-template-areas</code> 中定义的 <code>sidebar</code> <code>content</code> <code>header</code> 区域中</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/29/grid-8.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><a href="https://codepen.io/chuanv/pen/bGEyPZb" target="_blank" rel="noopener">演示地址</a></p><h4 id="grid-auto-flow-属性"><a href="#grid-auto-flow-属性" class="headerlink" title="grid-auto-flow 属性"></a>grid-auto-flow 属性</h4><p>划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行。即下图数字的顺序。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/29/grid-9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这个顺序由<code>grid-auto-flow</code>属性决定，默认值是<code>row</code>，即”<code>先行后列</code>“。也可以将它设成<code>column</code>，变成”<code>先列后行</code>“。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-auto-flow</span>: <span class="selector-tag">column</span>;</span><br></pre></td></tr></table></figure><p>即下图数字的顺序:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/29/grid-10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p><code>grid-auto-flow</code>属性除了设置成<code>row</code>和<code>column</code>，还可以设成<code>row dense</code>和<code>column dense</code>。这两个值主要用于，<strong>某些项目指定位置以后，剩下的项目怎么自动放置</strong>。<br>下面的例子让1号项目和2号项目各占据两个单元格，然后在默认的<code>grid-auto-flow: row</code>情况下，会产生下面这样的布局。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/29/grid-11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上图中，1号项目后面的位置是空的，这是因为3号项目默认跟着2号项目，所以会排在2号项目后面。现在修改设置，设为row dense，表示”先行后列”，并且尽可能紧密填满，尽量不出现空格。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-auto-flow</span>: <span class="selector-tag">row</span> <span class="selector-tag">dense</span>;</span><br></pre></td></tr></table></figure><p>上面代码的效果如下。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/29/grid-12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>相反地，<code>grid-auto-flow: column dense</code>是”先列后行”，先把列填充满再去填充行</p><h4 id="justify-items-属性，align-items-属性，place-items-属性"><a href="#justify-items-属性，align-items-属性，place-items-属性" class="headerlink" title="justify-items 属性，align-items 属性，place-items 属性"></a>justify-items 属性，align-items 属性，place-items 属性</h4><p><code>justify-items</code>属性设置单元格内容的水平位置（左中右），<code>align-items</code>属性设置单元格内容的垂直位置（上中下）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-items</span>: start | end | center | stretch;</span><br><span class="line">  <span class="attribute">align-items</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个属性的写法完全相同，都可以取下面这些值</p></li><li><p>start：对齐单元格的起始边缘。</p></li><li><p>end：对齐单元格的结束边缘。</p></li><li><p>center：单元格内部居中。</p></li><li><p>stretch：拉伸，占满单元格的整个宽度（默认值）。<br><code>place-items</code>属性是<code>align-items</code>属性和<code>justify-items</code>属性的合并简写形式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">place-items</span>: &lt;<span class="selector-tag">align-items</span>&gt; &lt;<span class="selector-tag">justify-items</span>&gt;;</span><br></pre></td></tr></table></figure><h4 id="justify-content-属性，align-content-属性，place-content-属性"><a href="#justify-content-属性，align-content-属性，place-content-属性" class="headerlink" title="justify-content 属性，align-content 属性，place-content 属性"></a>justify-content 属性，align-content 属性，place-content 属性</h4><p><code>justify-content</code>属性是整个内容区域在容器里面的水平位置（左中右），<code>align-content</code>属性是整个内容区域的垂直位置（上中下）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">  <span class="attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个属性的写法完全相同，都可以取下面这些值</p></li><li><p>start - 对齐容器的起始边框。</p></li><li><p>end - 对齐容器的结束边框。</p></li><li><p>center - 容器内部居中。</p></li><li><p>stretch - 项目大小没有指定时，拉伸占据整个网格容器。</p></li><li><p>space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032522.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p>space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032523.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p>space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032524.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><code>place-content</code>属性是<code>align-content</code>属性和<code>justify-content</code>属性的合并简写形式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">place-content</span>: &lt;<span class="selector-tag">align-content</span>&gt; &lt;<span class="selector-tag">justify-content</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="grid-auto-columns-属性，grid-auto-rows-属性"><a href="#grid-auto-columns-属性，grid-auto-rows-属性" class="headerlink" title="grid-auto-columns 属性，grid-auto-rows 属性"></a>grid-auto-columns 属性，grid-auto-rows 属性</h4><p><code>grid-auto-columns</code>属性和<code>grid-auto-rows</code>属性用来设置，浏览器自动创建的多余网格的列宽和行高。它们的写法与<code>grid-template-columns</code>和<code>grid-template-rows</code>完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。<br>下面的例子里面，划分好的网格是3行 x 3列，但是，8号项目指定在第4行，9号项目指定在第5行。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="number">50px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码指定新增的行高统一为50px（原始的行高为100px）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032525.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="grid-template-属性，grid-属性"><a href="#grid-template-属性，grid-属性" class="headerlink" title="grid-template 属性，grid 属性"></a>grid-template 属性，grid 属性</h4><p><code>grid-template</code>属性是<code>grid-template-columns</code>、<code>grid-template-rows</code>和<code>grid-template-areas</code>这三个属性的合并简写形式。<br><code>grid</code>属性是<code>grid-template-rows</code>、<code>grid-template-columns</code>、<code>grid-template-areas</code>、 <code>grid-auto-rows</code>、<code>grid-auto-columns</code>、<code>grid-auto-flow</code>这六个属性的合并简写形式。<br>从易读易写的角度考虑，还是建议不要合并属性，所以这里就不详细介绍这两个属性了。</p><h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><h4 id="grid-column-start-属性，grid-column-end-属性，grid-row-start-属性，grid-row-end-属性"><a href="#grid-column-start-属性，grid-column-end-属性，grid-row-start-属性，grid-row-end-属性" class="headerlink" title="grid-column-start 属性，grid-column-end 属性，grid-row-start 属性，grid-row-end 属性"></a>grid-column-start 属性，grid-column-end 属性，grid-row-start 属性，grid-row-end 属性</h4><p>具体方法就是指定项目的四个边框，分别定位在哪根网格线。</p></li><li><p>grid-column-start属性：左边框所在的垂直网格线</p></li><li><p>grid-column-end属性：右边框所在的垂直网格线</p></li><li><p>grid-row-start属性：上边框所在的水平网格线</p></li><li><p>grid-row-end属性：下边框所在的水平网格线</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码指定，1号项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032526.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>上图中，只指定了1号项目的左右边框，没有指定上下边框，所以会采用默认位置，即上边框是第一根水平网格线，下边框是第二根水平网格线。除了1号项目以外，其他项目都没有指定位置，由浏览器自动布局，这时它们的位置由容器的<code>grid-auto-flow</code>属性决定。<br>这四个属性的值还可以使用span关键字，表示”跨越”，即左右边框（上下边框）之间跨越多少个网格。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码表示，1号项目的左边框距离右边框跨越2个网格。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032528.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="grid-column-属性，grid-row-属性"><a href="#grid-column-属性，grid-row-属性" class="headerlink" title="grid-column 属性，grid-row 属性"></a>grid-column 属性，grid-row 属性</h4><p><code>grid-column</code>属性是<code>grid-column-start</code>和<code>grid-column-end</code>的合并简写形式，<code>grid-row</code>属性是<code>grid-row-start</code>属性和<code>grid-row-end</code>的合并简写形式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="justify-self-属性，align-self-属性，place-self-属性"><a href="#justify-self-属性，align-self-属性，place-self-属性" class="headerlink" title="justify-self 属性，align-self 属性，place-self 属性"></a>justify-self 属性，align-self 属性，place-self 属性</h4><p><code>justify-self</code>属性设置单元格内容的水平位置（左中右），跟<code>justify-items</code>属性的用法完全一致，但只作用于单个项目。<br><code>align-self</code>属性设置单元格内容的垂直位置（上中下），跟<code>align-items</code>属性的用法完全一致，也是只作用于单个项目。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">justify-self</span>: start | end | center | stretch;</span><br><span class="line">  <span class="attribute">align-self</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>start：对齐单元格的起始边缘。</p></li><li><p>end：对齐单元格的结束边缘。</p></li><li><p>center：单元格内部居中。</p></li><li><p>stretch：拉伸，占满单元格的整个宽度（默认值）。<br><code>place-self</code>属性是<code>align-self</code>属性和<code>justify-self</code>属性的合并简写形式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">place-self</span>: &lt;<span class="selector-tag">align-self</span>&gt; &lt;<span class="selector-tag">justify-self</span>&gt;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Grid布局&quot;&gt;&lt;a href=&quot;#Grid布局&quot; class=&quot;headerlink&quot; title=&quot;Grid布局&quot;&gt;&lt;/a&gt;Grid布局&lt;/h2&gt;&lt;h3 id=&quot;Grid布局是什么？&quot;&gt;&lt;a href=&quot;#Grid布局是什么？&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="页面布局" scheme="http://lawsan.xyz/tags/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>Vue全局配置</title>
    <link href="http://lawsan.xyz/2020/07/27/Vue%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE/"/>
    <id>http://lawsan.xyz/2020/07/27/Vue%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE/</id>
    <published>2020-07-27T02:51:12.000Z</published>
    <updated>2020-07-27T05:47:09.637Z</updated>
    
    <content type="html"><![CDATA[<p><code>Vue.config</code> 是一个对象，包含 Vue 的全局配置。可以在启动应用之前修改下列 property：</p><h3 id="silent"><a href="#silent" class="headerlink" title="silent"></a>silent</h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>false</code></li><li>用法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.silent = <span class="literal">true</span></span><br></pre></td></tr></table></figure>取消 Vue 所有的日志与警告。<h3 id="optionMergeStrategies"><a href="#optionMergeStrategies" class="headerlink" title="optionMergeStrategies"></a>optionMergeStrategies</h3></li><li>类型：<code>{ [key: string]: Function }</code></li><li>默认值：<code>{}</code></li><li>用法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.optionMergeStrategies._my_option = <span class="function"><span class="keyword">function</span> (<span class="params">parent, child, vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> child + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Profile = Vue.extend(&#123;</span><br><span class="line">  _my_option: <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Profile.options._my_option = 2</span></span><br></pre></td></tr></table></figure>自定义合并策略的选项。<br>合并策略选项分别接收在父实例和子实例上定义的该选项的值作为第一个和第二个参数，Vue 实例上下文被作为第三个参数传入。<h3 id="devtools"><a href="#devtools" class="headerlink" title="devtools"></a>devtools</h3></li><li>类型：<code>boolean</code></li><li>默认值：<code>true (生产版为 false)</code></li><li>用法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 务必在加载 Vue 之后，立即同步设置以下内容</span></span><br><span class="line">Vue.config.devtools = <span class="literal">true</span></span><br></pre></td></tr></table></figure>配置是否允许 <code>vue-devtools</code> 检查代码。开发版本默认为 <code>true</code>，生产版本默认为 <code>false</code>。生产版本设为 <code>true</code> 可以启用检查。<h3 id="errorHandler"><a href="#errorHandler" class="headerlink" title="errorHandler"></a>errorHandler</h3></li><li>类型：<code>Function</code></li><li>默认值：<code>undefined</code></li><li>用法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler = <span class="function"><span class="keyword">function</span> (<span class="params">err, vm, info</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// handle error</span></span><br><span class="line">  <span class="comment">// `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子</span></span><br><span class="line">  <span class="comment">// 只在 2.2.0+ 可用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例。<blockquote><p>从 2.2.0 起，这个钩子也会捕获组件生命周期钩子里的错误。同样的，当这个钩子是 <code>undefined</code> 时，被捕获的错误会通过 <code>console.error</code> 输出而避免应用崩溃。<br>从 2.4.0 起，这个钩子也会捕获 Vue 自定义事件处理函数内部的错误了。<br>从 2.6.0 起，这个钩子也会捕获 v-on DOM 监听器内部抛出的错误。另外，如果任何被覆盖的钩子或处理函数返回一个 Promise 链 (例如 async 函数)，则来自其 Promise 链的错误也会被处理。</p></blockquote><h3 id="warnHandler"><a href="#warnHandler" class="headerlink" title="warnHandler"></a>warnHandler</h3></li><li>类型：<code>Function</code></li><li>默认值：<code>undefined</code></li><li>用法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.warnHandler = <span class="function"><span class="keyword">function</span> (<span class="params">msg, vm, trace</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// `trace` 是组件的继承关系追踪</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>为 Vue 的运行时警告赋予一个自定义处理函数。<strong>注意这只会在开发者环境下生效，在生产环境下它会被忽略</strong>。<h3 id="ignoredElements"><a href="#ignoredElements" class="headerlink" title="ignoredElements"></a>ignoredElements</h3></li><li>类型：<code>Array&lt;string | RegExp&gt;</code></li><li>默认值：[]</li><li>用法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.ignoredElements = [</span><br><span class="line">  <span class="string">'my-custom-web-component'</span>,</span><br><span class="line">  <span class="string">'another-web-component'</span>,</span><br><span class="line">  <span class="comment">// 用一个 `RegExp` 忽略所有“ion-”开头的元素</span></span><br><span class="line">  <span class="comment">// 仅在 2.5+ 支持</span></span><br><span class="line">  /^ion-<span class="regexp">/</span></span><br><span class="line"><span class="regexp">]</span></span><br></pre></td></tr></table></figure>须使 Vue 忽略在 Vue 之外的自定义元素 (e.g. 使用了 Web Components APIs)。否则，它会假设你忘记注册全局组件或者拼错了组件名称，从而抛出一个关于 Unknown custom element 的警告。<h3 id="keyCodes"><a href="#keyCodes" class="headerlink" title="keyCodes"></a>keyCodes</h3></li><li>类型：<code>{ [key: string]: number | Array&lt;number&gt; }</code></li><li>默认值：<code>{}</code></li><li>用法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes = &#123;</span><br><span class="line">  v: <span class="number">86</span>,</span><br><span class="line">  f1: <span class="number">112</span>,</span><br><span class="line">  <span class="comment">// camelCase 不可用</span></span><br><span class="line">  mediaPlayPause: <span class="number">179</span>,</span><br><span class="line">  <span class="comment">// 取而代之的是 kebab-case 且用双引号括起来</span></span><br><span class="line">  <span class="string">"media-play-pause"</span>: <span class="number">179</span>,</span><br><span class="line">  up: [<span class="number">38</span>, <span class="number">87</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.media-play-pause</span>=<span class="string">"method"</span>&gt;</span></span><br></pre></td></tr></table></figure>给 v-on 自定义键位别名。<h3 id="performance"><a href="#performance" class="headerlink" title="performance"></a>performance</h3></li><li>类型：<code>boolean</code></li><li>默认值：<code>false</code> (自 2.2.3 起)</li><li>用法：<br>设置为 <code>true</code> 以在浏览器开发工具的性能/时间线面板中启用对组件初始化、编译、渲染和打补丁的性能追踪。只适用于<code>开发模式和支持 performance.mark API 的浏览器</code>上。</li></ul><h3 id="productionTip"><a href="#productionTip" class="headerlink" title="productionTip"></a>productionTip</h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>true</code></li><li>用法：<br>设置为 <code>false</code> 以阻止 vue 在启动时生成生产提示。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Vue.config&lt;/code&gt; 是一个对象，包含 Vue 的全局配置。可以在启动应用之前修改下列 property：&lt;/p&gt;
&lt;h3 id=&quot;silent&quot;&gt;&lt;a href=&quot;#silent&quot; class=&quot;headerlink&quot; title=&quot;silent
      
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://lawsan.xyz/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>深入Vue响应式原理</title>
    <link href="http://lawsan.xyz/2020/07/25/%E6%B7%B1%E5%85%A5Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
    <id>http://lawsan.xyz/2020/07/25/%E6%B7%B1%E5%85%A5Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</id>
    <published>2020-07-25T08:55:08.000Z</published>
    <updated>2020-07-26T03:01:23.363Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何追踪变化？"><a href="#如何追踪变化？" class="headerlink" title="如何追踪变化？"></a>如何追踪变化？</h3><p>当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的 property，并使用 <code>Object.defineProperty</code> 把这些 property 全部转为 <code>getter/setter</code>。<br>数据代理的另一个说法是数据劫持，当我们在访问或者修改对象的某个属性时，数据劫持可以拦截这个行为并进行额外的操作或者修改返回的结果。我们知道Vue响应式系统的核心就是数据代理，代理使得数据在访问时进行依赖收集，在修改更新时对依赖进行更新，这是响应式系统的核心思路。</p><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h3><p><code>Object.defineProperty()</code>方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。<br>基本用法：<code>Object.defineProperty(obj, prop, descriptor)</code><br><code>Object.defineProperty()</code>可以用来精确添加或修改对象的属性，只需要在descriptor对象中将属性特性描述清楚，descriptor的属性描述符有两种形式，一种是数据描述符，另一种是存取描述符，我们分别看看各自的特点。<br>数据描述符，它拥有四个属性配置</p><ul><li><code>configurable</code>：数据是否可删除，可配置</li><li><code>enumerable</code>：属性是否可枚举</li><li><code>value</code>：属性值,默认为undefined</li><li><code>writable</code>：属性是否可读写<br>存取描述符，它同样拥有四个属性选项</li><li><code>configurable</code>：数据是否可删除，可配置</li><li><code>enumerable</code>：属性是否可枚举</li><li><code>get</code>:一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。</li><li><code>set</code>:一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。</li><li><em>需要注意的是: 数据描述符的<code>value</code>，<code>writable</code> 和 存取描述符中的<code>get</code>, <code>set</code>属性不能同时存在，否则会抛出异常。*</em><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">defineReactive(data,key,data[key])</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data,key,val</span>)</span>&#123;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data,key,&#123;</span><br><span class="line">enumerable:<span class="literal">true</span>,</span><br><span class="line">configurable:<span class="literal">false</span>,</span><br><span class="line"><span class="keyword">get</span>()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'获取值'</span>)</span><br><span class="line"><span class="keyword">return</span> val</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">set</span>(newVal)&#123;</span><br><span class="line"><span class="keyword">if</span>(val === newVal) <span class="keyword">return</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'监听到值变化了'</span>,val,<span class="string">'--&gt;'</span>,newVal)</span><br><span class="line">val = newVal</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'lisi'</span>&#125;</span><br><span class="line">observe(arr)</span><br><span class="line">observe(obj)</span><br><span class="line">obj.age = <span class="number">18</span> <span class="comment">//拦截不到</span></span><br><span class="line">obj.name <span class="comment">//获取值</span></span><br><span class="line">obj.name = <span class="string">'programmer'</span> <span class="comment">//监听到值变化了 lisi --&gt;programmer</span></span><br><span class="line">arr[<span class="number">1</span>] <span class="comment">//获取值</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">8</span> <span class="comment">//监听到值变化了 3 --&gt;8</span></span><br><span class="line">arr[<span class="number">4</span>] = <span class="number">5</span> <span class="comment">//拦截不到</span></span><br></pre></td></tr></table></figure>然而<code>Object.defineProperty</code>是有缺陷的，比如添加属性是监听不到对象的添加和删除或者数组的变化是无法拦截的。</li></ul><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p>为了解决像数组这类无法进行数据拦截，以及深层次的嵌套问题，es6引入了<code>Proxy</code>的概念，它是真正在语言层面对数据拦截的定义。和<code>Object.defineProperty</code>一样，<code>Proxy</code>可以修改某些操作的默认行为，但是不同的是，<code>Proxy</code><strong>针对目标对象会创建一个新的实例对象，并将目标对象代理到新的实例对象上</strong>，。 本质的区别是后者会创建一个新的对象对原对象做代理，外界对原对象的访问，都必须先通过这层代理进行拦截处理。而拦截的结果是我们只要通过操作新的实例对象就能间接的操作真正的目标对象了。针对Proxy，下面是基础的写法:<br>语法：<code>const p = new Proxy(target, handler)</code></p><ul><li><code>target</code>要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</li><li><code>handler</code>一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">b</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">var</span> nobj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="keyword">get</span>(target, key, receiver) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'获取值'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, key, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(target, key, value, receiver) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'设置值'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, receiver)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">nobj.a = <span class="string">'代理'</span></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">//设置值 &#123;b:18,a: "代理"&#125;</span></span><br></pre></td></tr></table></figure><code>Proxy</code>能监听数组的变化，<code>添加</code>，<code>删除</code>，<code>修改</code>等。</li></ul><h3 id="依赖收集"><a href="#依赖收集" class="headerlink" title="依赖收集"></a>依赖收集</h3><h4 id="为什么要收集依赖？"><a href="#为什么要收集依赖？" class="headerlink" title="为什么要收集依赖？"></a>为什么要收集依赖？</h4><p>举个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该模板中使用了数据name，所以它发生变化时，要向使用了它的地方发送通知。总结一句话就是<strong>在getter中收集依赖，在setter中触发依赖</strong></p><h3 id="订阅者-Dep"><a href="#订阅者-Dep" class="headerlink" title="订阅者 Dep"></a>订阅者 Dep</h3><p>我们把依赖收集的代码封装成一个Dep类，它帮助我们管理依赖。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> () &#123;</span><br><span class="line">        <span class="comment">/* 用来存放Watcher对象的数组 */</span></span><br><span class="line">        <span class="keyword">this</span>.subs = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 在subs中添加一个Watcher对象 */</span></span><br><span class="line">    addSub (sub) &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(sub);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 通知所有Watcher对象更新视图 */</span></span><br><span class="line">    notify () &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function">(<span class="params">sub</span>) =&gt;</span> &#123;</span><br><span class="line">            sub.update();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 <code>addSub</code> 方法可以在目前的 Dep 对象中增加一个 Watcher 的订阅操作；<br>用 <code>notify</code> 方法通知目前 Dep 对象的 subs 中的所有 Watcher 对象触发更新操作。</p><h3 id="观察者-Watcher"><a href="#观察者-Watcher" class="headerlink" title="观察者 Watcher"></a>观察者 Watcher</h3><p>当属性发生变化后，我们要通知用到数据的地方，而使用这个数据的地方有很多，而且类型还不一样，既有可能是模板，也有可能是用户写的一个watch,这时需要抽象出一个能集中处理这些情况的类。然后，我们在依赖收集阶段只收集这个封装好的类的实例进来，通知也只通知它一个，再由它负责通知其他地方。<br>依赖收集的目的是将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(obj, key, cb) &#123;</span><br><span class="line">    <span class="comment">// 将 Dep.target 指向自己</span></span><br><span class="line">    <span class="comment">// 然后触发属性的 getter 添加监听</span></span><br><span class="line">    <span class="comment">// 最后将 Dep.target 置空</span></span><br><span class="line">    Dep.target = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">this</span>.cb = cb</span><br><span class="line">    <span class="keyword">this</span>.obj = obj</span><br><span class="line">    <span class="keyword">this</span>.key = key</span><br><span class="line">    <span class="keyword">this</span>.value = obj[key]</span><br><span class="line">    Dep.target = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  update() &#123;</span><br><span class="line">    <span class="comment">// 获得新值</span></span><br><span class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.obj[<span class="keyword">this</span>.key]</span><br><span class="line">   <span class="comment">// 我们定义一个 cb 函数，这个函数用来模拟视图更新，调用它即代表更新视图</span></span><br><span class="line">    <span class="keyword">this</span>.cb(<span class="keyword">this</span>.value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是 Watcher 的简单实现，在执行构造函数的时候将 Dep.target 指向自身，从而使得收集到了对应的 Watcher，在派发更新的时候取出对应的 Watcher ,然后执行 update 函数。</p><h3 id="收集依赖"><a href="#收集依赖" class="headerlink" title="收集依赖"></a>收集依赖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断类型</span></span><br><span class="line">  <span class="keyword">if</span> (!obj || <span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    defineReactive(obj, key, obj[key])</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params">obj, key, value</span>) </span>&#123;</span><br><span class="line">    observe(value)  <span class="comment">// 递归子属性</span></span><br><span class="line">    <span class="keyword">let</span> dp = <span class="keyword">new</span> Dep() <span class="comment">//新增</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">      enumerable: <span class="literal">true</span>, <span class="comment">//可枚举（可以遍历）</span></span><br><span class="line">      configurable: <span class="literal">true</span>, <span class="comment">//可配置（比如可以删除）</span></span><br><span class="line">      <span class="keyword">get</span>: function reactiveGetter () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'get'</span>, value) <span class="comment">// 监听</span></span><br><span class="line">     <span class="comment">// 将 Watcher 添加到订阅</span></span><br><span class="line">       <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">         dp.addSub(Dep.target) <span class="comment">// 新增</span></span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span>: function reactiveSetter (newVal) &#123;</span><br><span class="line">        observe(newVal) <span class="comment">//如果赋值是一个对象，也要递归子属性</span></span><br><span class="line">        <span class="keyword">if</span> (newVal !== value) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'set'</span>, newVal) <span class="comment">// 监听</span></span><br><span class="line">          render()</span><br><span class="line">          value = newVal</span><br><span class="line">     <span class="comment">// 执行 watcher 的 update 方法</span></span><br><span class="line">          dp.notify() <span class="comment">//通知更新</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="keyword">this</span>._data = options.data;</span><br><span class="line">        observer(<span class="keyword">this</span>._data);</span><br><span class="line">        <span class="comment">/* 新建一个Watcher观察者对象，这时候Dep.target会指向这个Watcher对象 */</span></span><br><span class="line">        <span class="keyword">new</span> Watcher();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'模拟视图渲染'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关流程如下图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/25/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在 new Vue() 后， Vue 会调用<code>_init</code> 函数进行初始化，也就是init 过程，在 这个过程Data通过<code>Observer</code>转换成了<code>getter/setter</code>的形式，来对数据追踪变化，当被设置的对象被读取的时候会执行getter 函数，而在当被赋值的时候会执行 setter函数。<br>当render function 执行的时候，因为会读取所需对象的值，所以会触发getter函数从而将Watcher添加到依赖中进行依赖收集。<br>在修改对象的值的时候，会触发对应的setter， setter通知之前依赖收集得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher就会开始调用 update 来更新视图。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何追踪变化？&quot;&gt;&lt;a href=&quot;#如何追踪变化？&quot; class=&quot;headerlink&quot; title=&quot;如何追踪变化？&quot;&gt;&lt;/a&gt;如何追踪变化？&lt;/h3&gt;&lt;p&gt;当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此
      
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://lawsan.xyz/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>关于HTML5中新增的特性</title>
    <link href="http://lawsan.xyz/2020/07/23/%E5%85%B3%E4%BA%8EHTML5%E4%B8%AD%E6%96%B0%E5%A2%9E%E7%9A%84%E7%89%B9%E6%80%A7/"/>
    <id>http://lawsan.xyz/2020/07/23/%E5%85%B3%E4%BA%8EHTML5%E4%B8%AD%E6%96%B0%E5%A2%9E%E7%9A%84%E7%89%B9%E6%80%A7/</id>
    <published>2020-07-23T05:05:06.000Z</published>
    <updated>2020-07-23T10:58:54.229Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML语义化"><a href="#HTML语义化" class="headerlink" title="HTML语义化"></a>HTML语义化</h3><p>HTML 语义化是指仅仅从 HTML 元素上就能看出页面的大致结构，比如需要强调的内容可以放在 <code>&lt;strong&gt;</code> 标签中，而不是通过样式设置 <code>&lt;span&gt;</code> 标签去做。不同浏览器对 HTML 元素的解析可能有差异，HTML 语义化便是在抛开样式之后，页面能有一个友好的展示效果。我们力求让页面有良好的结构，让页面的元素有含义，同时利于被搜索引擎解析，利于 SEO。HTML 语义化的建议：</p><ul><li>少使用无意义的 <code>&lt;div&gt;</code>、<code>&lt;span&gt;</code> 标签；</li><li>在 <code>&lt;label&gt;</code> 标签中设置 for 属性和对应的 <code>&lt;input&gt;</code> 关联起来；</li><li>设置 <code>&lt;img&gt;</code> 标签的 alt 属性，给 <code>&lt;a&gt;</code> 标签设置 title 属性，利于 SEO；</li><li>在页面的标题部分使用 <code>&lt;h1&gt;~&lt;h6&gt;</code> 标签，不需要给它们加多余的样式；</li><li>与表单、有序列表、无序列表相关的标签不要单独使用。<br>HTML5 也新增了一些语义化的元素，我们通过标签名就能判断标签内容。使用语义元素的页面大致结构如下<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/23/%E8%AF%AD%E4%B9%89%E5%8C%96.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>语义元素的名称其实也很好理解，下面是它们的作用和用法：</li><li><code>&lt;header&gt;</code> 标签通常放在页面或页面某个区域的顶部，用来设置页眉；</li><li><code>&lt;nav&gt;</code>标签可以用来定义导航链接的集合，点击链接可以跳转到其他页面；</li><li><code>&lt;article&gt;</code> 标签中的内容比较独立，可以是一篇新闻报道，一篇博客，它可以独立于页面的其他内容进行阅读；</li><li><code>&lt;section&gt;</code> 标签表示页面中的一个区域，通常对页面进行分块或对内容进行分段，<code>&lt;section&gt;</code> 标签和 <code>&lt;article&gt;</code> 标签可以互相嵌套；</li><li><code>&lt;aside&gt;</code> 标签用来表示除页面主要内容之外的内容，比如侧边栏；</li><li><code>&lt;footer&gt;</code> 标签位于页面或页面某个区域的底部，用来设置页脚，通常包含版权信息，联系方式等。<br>还有其他的新增标签：</li><li><code>&lt;details&gt;</code> 用于描述文档或文档某个部分的细节。</li><li><code>&lt;summary&gt;</code> 标签包含 details 元素的标题。</li><li><code>&lt;figure&gt;</code> 规定独立的流内容（图像、图表、照片、代码等等）。</li><li><code>&lt;figcaption&gt;</code> 定义 <code>&lt;figure&gt;</code> 元素的标题。</li><li><code>&lt;dialog&gt;</code> 定义对话框，比如提示框。</li><li><code>&lt;bdi&gt;</code> 允许您设置一段文本，使其脱离其父元素的文本方向设置。</li><li><code>&lt;command&gt;</code> 定义命令按钮，比如单选按钮、复选框或按钮。</li><li><code>&lt;mark&gt;</code>  定义带有记号的文本。</li><li><code>&lt;meter&gt;</code>     定义度量衡。仅用于已知最大和最小值的度量。</li><li><code>&lt;progress&gt;</code> 定义任何类型的任务的进度。</li><li><code>&lt;time&gt;</code> 定义日期或时间。</li><li><code>&lt;wbr&gt;</code> 规定在文本中的何处适合添加换行符。</li><li><code>&lt;rt&gt;</code> 定义字符（中文注音或字符）的解释或发音。<h3 id="HTML5-Input类型"><a href="#HTML5-Input类型" class="headerlink" title="HTML5 Input类型"></a>HTML5 Input类型</h3><code>color</code>,<code>date</code>,<code>datetime</code>,<code>datetime-local</code>,<code>email</code>,<code>month</code>,<code>number</code>,<code>range</code>,<code>search</code>,<code>tel</code>,<code>time</code>,<code>url</code>,<code>week</code><h3 id="HTML5-表单元素"><a href="#HTML5-表单元素" class="headerlink" title="HTML5 表单元素"></a>HTML5 表单元素</h3>HTML5 有以下新的表单元素:<code>&lt;datalist&gt;</code>,<code>&lt;keygen&gt;</code>,<code>&lt;output&gt;</code></li><li><em>HTML5 <code>&lt;datalist&gt;</code> 元素*</em><br><code>&lt;datalist&gt;</code> 元素规定输入域的选项列表。<br><code>&lt;datalist&gt;</code> 属性规定 form 或 input 域应该拥有自动完成功能。当用户在自动完成域中开始输入时，浏览器应该在该域中显示填写的选项：<br>使用 <code>&lt;input&gt;</code> 元素的列表属性与 <code>&lt;datalist&gt;</code>元素绑定。<a href="https://www.runoob.com/try/try.php?filename=tryhtml5_datalist" target="_blank" rel="noopener">示例</a></li><li><em>HTML5<code>&lt;keygen&gt;</code>元素*</em><br><code>&lt;keygen&gt;</code> 元素的作用是提供一种验证用户的可靠方法。<br><code>&lt;keygen&gt;</code>标签规定用于表单的密钥对生成器字段。<br>当提交表单时，会生成两个键，一个是私钥，一个公钥。<br>私钥（private key）存储于客户端，公钥（public key）则被发送到服务器。公钥可用于之后验证用户的客户端证书（client certificate）。<a href="https://www.runoob.com/try/try.php?filename=tryhtml5_keygen" target="_blank" rel="noopener">示例</a></li><li><em>HTML5 <code>&lt;output&gt;</code> 元素*</em><br><code>&lt;output&gt;</code> 元素用于不同类型的输出，比如计算或脚本输出。<a href="https://www.runoob.com/try/try.php?filename=tryhtml5_output" target="_blank" rel="noopener">示例</a><h3 id="HTML5事件"><a href="#HTML5事件" class="headerlink" title="HTML5事件"></a>HTML5事件</h3></li></ul><ol><li>contextmenu<br>contextmenu 属性规定了元素的上下文菜单。当用户右击元素时将显示上下文菜单。contextmenu 属性的值是需要打开的 <code>&lt;menu&gt;</code> 元素的 id。<a href="https://www.runoob.com/try/try.php?filename=tryhtml5_global_contextmenu" target="_blank" rel="noopener">示例</a></li><li>DOMContentLoaded<br>当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架的完全加载。<br>load 仅用于检测一个完全加载的页面，页面的html、css、js、图片等资源都已经加载完之后才会触发 load 事件。</li><li>readystatechange<br>可用来判断动态载入的 script、link 标签是否加载完成。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">script.addEventListener(<span class="string">'readystatechange'</span>, <span class="function"><span class="keyword">function</span> <span class="title">eventListener</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.readyState === <span class="string">'loaded'</span> || event.readyState === <span class="string">'complete'</span>) &#123; <span class="comment">// hack 的手段，浏览器自身的问题</span></span><br><span class="line">    script.removeEventListener(<span class="string">'readystatechange'</span>, eventListener)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">script.src = <span class="string">'example.js'</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script)</span><br></pre></td></tr></table></figure></li><li>hashchange<br>用来监听浏览器链接的hash值变化。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUUID</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">1000000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'toggle'</span>)</span><br><span class="line">  el.onclick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    <span class="keyword">const</span> uuid = getUUID()</span><br><span class="line">    location.hash = <span class="string">'#'</span> + uuid</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.onhashchange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'oldURL:'</span>, e.oldURL)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'newURL:'</span>, e.newURL)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HTML5-表单属性"><a href="#HTML5-表单属性" class="headerlink" title="HTML5 表单属性"></a>HTML5 表单属性</h3><code>&lt;form&gt;</code>新属性：<code>autocomplete</code>，<code>novalidate</code><br><code>&lt;input&gt;</code>新属性：<code>autocomplete</code>,<code>autofocus</code>,<code>form</code>,<code>formaction</code>,<code>formenctype</code>,<code>formmethod</code>,<code>formnovalidate</code>,<code>formtarget</code>,<br><code>height 与 width</code>,<code>list</code>,<code>min 与 max</code>,<code>multiple</code>,<code>pattern (regexp)</code>,<code>placeholder</code>,<code>required</code>,<code>step</code><h3 id="HTML5-存储"><a href="#HTML5-存储" class="headerlink" title="HTML5 存储"></a>HTML5 存储</h3></li><li>sessionStorage: 大小上限为 2.5Mb(不同浏览器会有差异), 页面关闭时便清空;</li><li>localStorage: 大小上限为 2.5Mb(不同浏览器会有差异), 页面关闭时不会清空;<br>它们的 api 也是一致的, 有如下几个:</li></ol><ul><li>setItem(key, value)</li><li>getItem(key)</li><li>removeItem(key)</li><li>clear()<blockquote><p>在 HTML5 范围之外与存储相关的技术还有 cookie(存放在客户端，可以由客户端也可以由服务端生成, 大小上限为 4 kb)、IndexedDB(大小上限为 5 Mb)、cacheStorage(ServiceWorker)。</p></blockquote><h3 id="HTML5-JavaScript-API"><a href="#HTML5-JavaScript-API" class="headerlink" title="HTML5 JavaScript API"></a>HTML5 JavaScript API</h3></li></ul><ol><li><code>requestAnimationFrame(callback)</code>: 表示在重绘前执行指定的回调函数，下面通过一个简单的 demo 来认识它。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> frame</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">timeStamp</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(timeStamp) <span class="comment">// 开始执行回调的时间戳</span></span><br><span class="line">  <span class="comment">// 如果想要产生循环动画的效果, 需在回调函数中再次调用 requestAnimationFrame()</span></span><br><span class="line">  requestAnimationFrame(callback)</span><br><span class="line">&#125;</span><br><span class="line">frame = requestAnimationFrame(callback) <span class="comment">// 在下次重绘之前调用回调</span></span><br><span class="line"><span class="comment">// 可以在销毁期的生命周期函数中执行以下函数</span></span><br><span class="line">componentWillUnMount() &#123;</span><br><span class="line">  cancelAnimationFrame(frame)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>一帧的时间大致为 16ms。</li><li>Web Worker<br>当在 HTML 页面中执行脚本时，页面的状态是不可响应的，直到脚本已完成。<br>web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行。</li></ol><p><strong>检测浏览器是否支持Web Worker</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span>(Worker)!==<span class="string">"undefined"</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 是的! Web worker 支持!</span></span><br><span class="line">    <span class="comment">// 一些代码.....</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//抱歉! Web Worker 不支持</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建 Web Worker 对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span>(w)==<span class="string">"undefined"</span>)</span><br><span class="line">&#123;</span><br><span class="line">    w=<span class="keyword">new</span> Worker(<span class="string">"demo_workers.js"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>终止 Web Worker</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w.terminate();</span><br></pre></td></tr></table></figure><p><code>Worker.onmessage</code>  当MessageEvent类型的事件冒泡到 worker 时，事件监听函数 EventListener 被调用.<br><code>Worker.onmessageerror</code> 当messageerror 类型的事件发生时，对应的EventHandler 代码被调用。<br><code>Worker.postMessage()</code> 发送一条消息到最近的外层对象，消息可由任何 JavaScript 对象组成。<br><code>Worker.terminate()</code> 立即终止 worker。该方法不会给 worker 留下任何完成操作的机会；就是简单的立即停止。</p><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>计数： <span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"startWorker()"</span>&gt;</span>开始工作<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"stopWorker()"</span>&gt;</span>停止工作<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是demo_workers.js里面的内容</span></span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timedCount</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    i=i+<span class="number">1</span>;</span><br><span class="line">    postMessage(i); <span class="comment">//用于向 HTML 页面传回一段消息</span></span><br><span class="line">    setTimeout(<span class="string">"timedCount()"</span>,<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">timedCount();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> w;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startWorker</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span>(Worker) !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span>(w) == <span class="string">"undefined"</span>) &#123;</span><br><span class="line">w = <span class="keyword">new</span> Worker(<span class="string">"demo_workers.js"</span>);</span><br><span class="line">&#125;</span><br><span class="line">w.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; <span class="comment">//接收postMessage的数据</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML = event.data;</span><br><span class="line">&#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML = <span class="string">"抱歉，你的浏览器不支持 Web Workers..."</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopWorker</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">w.terminate();</span><br><span class="line">w = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;HTML语义化&quot;&gt;&lt;a href=&quot;#HTML语义化&quot; class=&quot;headerlink&quot; title=&quot;HTML语义化&quot;&gt;&lt;/a&gt;HTML语义化&lt;/h3&gt;&lt;p&gt;HTML 语义化是指仅仅从 HTML 元素上就能看出页面的大致结构，比如需要强调的内容可以放在 &lt;c
      
    
    </summary>
    
    
    
      <category term="HTML5" scheme="http://lawsan.xyz/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>CSS盒模型与BFC</title>
    <link href="http://lawsan.xyz/2020/07/23/CSS%E7%9B%92%E6%A8%A1%E5%9E%8B%E4%B8%8EBFC/"/>
    <id>http://lawsan.xyz/2020/07/23/CSS%E7%9B%92%E6%A8%A1%E5%9E%8B%E4%B8%8EBFC/</id>
    <published>2020-07-23T02:33:57.000Z</published>
    <updated>2020-07-23T04:52:06.237Z</updated>
    
    <content type="html"><![CDATA[<p>所有HTML元素可以看作盒子，在CSS中，<code>box model</code>这一术语是用来设计和布局时使用。<br>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：<code>边距</code>，<code>边框</code>，<code>填充</code>，和<code>实际内容</code>。<br>盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。<br>下面的图片说明了盒子模型(Box Model)：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/23/box-model.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>不同部分的说明：</p><ul><li>Margin(外边距) - 清除边框外的区域，外边距是透明的。</li><li>Border(边框) - 围绕在内边距和内容外的边框。</li><li>Padding(内边距) - 清除内容周围的区域，内边距是透明的。</li><li>Content(内容) - 盒子的内容，显示文本和图像。</li><li>注意：我们用盒子的宽高来衡量盒子的大小，可以看做总元素的宽度和高度，和元素本身设置的宽度和高度（width，height）不是同一个概念。<h3 id="标准盒模型"><a href="#标准盒模型" class="headerlink" title="标准盒模型"></a>标准盒模型</h3></li><li>元素的 width、height 只包含内容 content，不包含 border 和 padding 值；</li><li>盒子的大小由元素的宽高、边框和内边距决定。</li><li>盒子的宽/高 = width/height + border + padding + margin<br>模型如下图：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/23/W3C-box.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="IE盒模型"><a href="#IE盒模型" class="headerlink" title="IE盒模型"></a>IE盒模型</h3></li><li>元素的 width、height 不仅包括 content，还包括 border 和 padding；</li><li>盒子的大小取决于 width、height，修改 border 和 padding 值不能改变盒子的大小</li><li>盒子宽/高=width/height + margin = 内容区宽度/高度 + padding + border + margin<br>盒型如下图：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/23/IE-box.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul><h3 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h3><ul><li>标准盒模型和IE盒模型就在内容content的区别，标准盒模型的content只包括width/height，而IE盒模型的content包括width/height+border+padding。</li><li>标准盒模型下元素的 <code>box-sizing</code> 属性（IE8+）默认值为 <code>content-box</code>，将它设置成 <code>border-box</code> 可转换为 IE 盒模型。在实际应用场景中，若想控制元素总宽高保持固定，这个设置很有用。</li><li>元素的宽（width）、高（height）、边框（border）、内边距（padding）、外边距（margin）都是盒子模型的重要组成部分，但是盒子模型的大小只与元素的宽高、边框、内间距有关，外边距只影响盒子所占外围空间的大小。<h3 id="边距重叠解决方案-BFC"><a href="#边距重叠解决方案-BFC" class="headerlink" title="边距重叠解决方案(BFC)"></a>边距重叠解决方案(BFC)</h3>首先要明确BFC是什么意思，其全英文拼写为 <code>Block Formatting Context</code> 直译为<code>块级格式化上下文</code>。它是一个独立的渲染区域，只有<code>Block-level box</code>参与， 它规定了内部的<code>Block-level Box</code>如何布局，并且与这个区域外部毫不相干。</li><li><code>Block-level box</code>:display 属性为 block, list-item, table 的元素。</li><li><code>inline-level box</code>:display 属性为  inline, inline-block, inline-table的元素。<h4 id="BFC布局规则"><a href="#BFC布局规则" class="headerlink" title="BFC布局规则"></a>BFC布局规则</h4></li><li>内部的box会在垂直方向，一个接一个的放置</li><li>每个元素的margin box的左边，与包含块border box的左边相接触（对于从做往右的格式化，否则相反）</li><li>box垂直方向的距离由margin决定，属于同一个BFC的两个相邻box的margin会发生重叠</li><li>BFC的区域不会与浮动区域的box重叠</li><li>BFC是一个页面上的独立的容器，外面的元素不会影响BFC里的元素，反过来，里面的也不会影响外面的</li><li>计算BFC高度的时候，浮动元素也会参与计算<h4 id="如何创建BFC"><a href="#如何创建BFC" class="headerlink" title="如何创建BFC"></a>如何创建BFC</h4></li><li>float属性不为none（脱离文档流）</li><li>position为absolute或fixed</li><li>display为inline-block,table-cell,table-caption,flex,inline-flex</li><li>overflow不为visible</li><li>根元素, 即HTML元素<h4 id="BFC的作用"><a href="#BFC的作用" class="headerlink" title="BFC的作用"></a>BFC的作用</h4></li></ul><ol><li>利用BFC避免margin重叠</li><li>自适应两栏布局</li><li>清除内部浮动<br>例子如下：<h5 id="避免margin重叠"><a href="#避免margin重叠" class="headerlink" title="避免margin重叠"></a>避免margin重叠</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.pOne</span>&#123;</span></span><br><span class="line">margin: 10px 0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.pTwo</span>&#123;</span></span><br><span class="line">margin: 30px 0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"pOne"</span>&gt;</span>文本1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"pTwo"</span>&gt;</span>文本2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>在上面的例子中，margin会重叠，会以最大的margin为准。也就是两个p元素的外边距为30px。<br>当我们利用BFC时<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.pOne</span>&#123;</span></span><br><span class="line">margin: 10px 0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.pTwo</span>&#123;</span></span><br><span class="line">margin: 30px 0;</span><br><span class="line">&#125;</span><br><span class="line">div&#123;</span><br><span class="line">overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"pOne"</span>&gt;</span>文本1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"pTwo"</span>&gt;</span>文本2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>利用BFC消除了margin重叠问题，这样的话两个p元素的外边距为30+10=40px。<h5 id="自适应两栏布局"><a href="#自适应两栏布局" class="headerlink" title="自适应两栏布局"></a>自适应两栏布局</h5>根据BFC的布局规则：每个元素的margin box的左边，与包含块border box的左边相接触（对于从做往右的格式化，否则相反）。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.left</span>&#123;</span></span><br><span class="line">height: 300px;</span><br><span class="line">width: 200px;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#00FFFF</span>;</span></span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.right</span>&#123;</span></span><br><span class="line">height: 500px;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#F5F5DC</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>LEFT<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>RIGHT<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>效果如下图：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/23/BFC-1.JPG" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>根据BFC的布局规则：BFC的区域不会与浮动区域的box重叠。所以我们要创建一个BFC，避免left和right重叠。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.left</span>&#123;</span></span><br><span class="line">height: 300px;</span><br><span class="line">width: 200px;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#00FFFF</span>;</span></span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.right</span>&#123;</span></span><br><span class="line">height: 500px;</span><br><span class="line"><span class="css"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>; <span class="comment">/*right变为BFC*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#F5F5DC</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>LEFT<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>RIGHT<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/23/BFC-2.JPG" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="清除内部浮动"><a href="#清除内部浮动" class="headerlink" title="清除内部浮动"></a>清除内部浮动</h5>当我们不给父节点设置高度，子节点设置浮动的时候，会发生高度塌陷，这个时候我们就要清除浮动。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span>&#123;</span></span><br><span class="line">width: 300px;</span><br><span class="line">border: 5px solid darkgoldenrod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.child</span>&#123;</span></span><br><span class="line">height: 100px;</span><br><span class="line">width: 100px;</span><br><span class="line">float: left;</span><br><span class="line"><span class="css"><span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#00FFFF</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>效果如下，父节点高度塌陷：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/23/BFC-3.JPG" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>根据BFC布局规则：计算BFC高度的时候，浮动元素也会参与计算。因此我们把父节点设置为BFC就可以解决高度塌陷。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span>&#123;</span></span><br><span class="line">width: 300px;</span><br><span class="line">border: 5px solid darkgoldenrod;</span><br><span class="line"><span class="css"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>; <span class="comment">/*BFC*/</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.child</span>&#123;</span></span><br><span class="line">height: 100px;</span><br><span class="line">width: 100px;</span><br><span class="line">float: left;</span><br><span class="line"><span class="css"><span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#00FFFF</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/23/BFC-4.JPG" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ol><h3 id="关于解决父节点高度塌陷问题"><a href="#关于解决父节点高度塌陷问题" class="headerlink" title="关于解决父节点高度塌陷问题"></a>关于解决父节点高度塌陷问题</h3><h4 id="给父元素末尾添加一个空元素，并设置成清除浮动"><a href="#给父元素末尾添加一个空元素，并设置成清除浮动" class="headerlink" title="给父元素末尾添加一个空元素，并设置成清除浮动"></a>给父元素末尾添加一个空元素，并设置成清除浮动</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear:both;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>缺点：添加了无意义标签，不易于后期维护，违背了结构和表现分离的标准</p><h4 id="给父元素添加-overflow：auto"><a href="#给父元素添加-overflow：auto" class="headerlink" title="给父元素添加 overflow：auto;"></a>给父元素添加 overflow：auto;</h4><h4 id="让父元素也浮动"><a href="#让父元素也浮动" class="headerlink" title="让父元素也浮动"></a>让父元素也浮动</h4><p>缺点：影响整体页面布局，若父元素也有父元素呢？总不能一直浮动到body吧？</p><h4 id="使用after伪元素"><a href="#使用after伪元素" class="headerlink" title="使用after伪元素"></a>使用after伪元素</h4><p>给父元素添加一个类，来添加一个看不见的块元素，以实现清除浮动。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">visibility</span>: hidden;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h4><p>也就是BFC的布局规则：计算BFC高度的时候，浮动元素也会参与计算。上面的方法也用到了这条规则。下面这个方法是一个不错的方法。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line"><span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;所有HTML元素可以看作盒子，在CSS中，&lt;code&gt;box model&lt;/code&gt;这一术语是用来设计和布局时使用。&lt;br&gt;CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：&lt;code&gt;边距&lt;/code&gt;，&lt;code&gt;边框&lt;/code&gt;，&lt;code&gt;填充&lt;/c
      
    
    </summary>
    
    
    
      <category term="CSS" scheme="http://lawsan.xyz/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>一文带你深入了解Promise</title>
    <link href="http://lawsan.xyz/2020/07/20/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Promise/"/>
    <id>http://lawsan.xyz/2020/07/20/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Promise/</id>
    <published>2020-07-20T07:03:28.000Z</published>
    <updated>2020-07-22T01:51:34.472Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Promise？"><a href="#什么是Promise？" class="headerlink" title="什么是Promise？"></a>什么是Promise？</h3><p><code>Promise</code>是JS异步编程中的重要概念，异步抽象处理对象，是目前比较流行Javascript异步编程解决方案之一。<br>从语法上来说:Promise是一个构造函数。<br>从功能上来说：promise对象是用来封装一个异步操作并可以获取其结果。</p><h3 id="Promises-A-规范"><a href="#Promises-A-规范" class="headerlink" title="Promises/A+ 规范"></a>Promises/A+ 规范</h3><p>为实现者提供一个健全的、可互操作的 JavaScript <code>promise</code> 的开放标准。</p><h4 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h4><ul><li><code>解决 (fulfill)</code> : 指一个 promise 成功时进行的一系列操作，如状态的改变、回调的执行。虽然规范中用 fulfill 来表示解决，但在后世的 promise 实现多以 <code>resolve</code> 来指代之。</li><li><code>拒绝（reject)</code>: 指一个 promise 失败时进行的一系列操作。</li><li><code>拒因 (reason)</code> : 也就是拒绝原因，指在 promise 被拒绝时传递给拒绝回调的值。</li><li><code>终值（eventual value）</code> : 所谓终值，指的是 promise 被解决时传递给解决回调的值，由于 promise 有一次性的特征，因此当这个值被传递时，标志着 promise 等待态的结束，故称之终值，有时也直接简称为值（value）。</li><li><code>Promise</code> : promise 是一个拥有 then 方法的对象或函数，其行为符合本规范。</li><li><code>thenable</code> : 是一个定义了 then 方法的对象或函数。</li><li><code>异常（exception）</code> : 是使用 throw 语句抛出的一个值。</li></ul><h3 id="Promise使用"><a href="#Promise使用" class="headerlink" title="Promise使用"></a>Promise使用</h3><h4 id="Promise状态"><a href="#Promise状态" class="headerlink" title="Promise状态"></a>Promise状态</h4><p>一个Promise的当前状态必须是以下三种状态中的一种: <strong>等待状态（Pending）</strong>、** 执行状态（Fulfilled）** 和 <strong>拒绝状态（Rejected）</strong>。<br>一旦状态改变就不能再次改变。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;...&#125; <span class="comment">/* executor */</span>  );</span><br></pre></td></tr></table></figure><p>Promise接收一个参数<code>executor</code>，executor是带有 <code>resolve</code> 和 <code>reject</code> 两个参数的函数 。Promise构造函数执行时<code>立即调用</code>executor 函数， resolve 和 reject 两个函数作为参数传递给executor（executor 函数在Promise构造函数返回所建promise实例对象前被调用）。resolve 和 reject 函数被调用时，分别将promise的状态改为fulfilled（完成）或rejected（失败）。<br>相关流程如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/20/promises.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// 异步处理</span></span><br><span class="line">       <span class="comment">// 处理结束后、调用resolve 或 reject</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="then方法"><a href="#then方法" class="headerlink" title="then方法"></a>then方法</h4><p>一个 promise 必须提供一个 then 方法以访问其当前值、终值和据因，<strong>只有状态改变为<code>Fulfilled</code>或者<code>Rejected</code>时才会调用<code>then</code>方法，如果状态为<code>Pending</code>则不调用</strong>。<br>promise 的 then 方法接受两个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure><p>onFulfilled 和 onRejected 都是可选参数;如果 onFulfilled 不是函数，其必须被忽略;如果 onRejected 不是函数，其必须被忽略。<br>then 方法可以被同一个 promise 调用多次，then方法必须返回一个promise对象。</p><h4 id="race方法"><a href="#race方法" class="headerlink" title="race方法"></a>race方法</h4><p><code>Promise.race(iterable)</code> 方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，返回的 promise就会解决或拒绝。</p><h4 id="all方法"><a href="#all方法" class="headerlink" title="all方法"></a>all方法</h4><p><code>Promise.all(iterable)</code> 方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都“完成（resolved）”或参数中不包含 promise 时回调完成（resolve）；如果参数中  promise 有一个失败（rejected），此实例回调失败（reject），失败的原因是第一个失败 promise 的结果。</p><h4 id="reject方法"><a href="#reject方法" class="headerlink" title="reject方法"></a>reject方法</h4><p><code>Promise.reject()</code>方法返回一个带有拒绝原因的Promise对象。</p><h4 id="resolve方法"><a href="#resolve方法" class="headerlink" title="resolve方法"></a>resolve方法</h4><p><code>Promise.resolve(value)</code>方法返回一个以给定值解析后的Promise 对象。如果这个值是一个 promise ，那么将返回这个 promise ；如果这个值是thenable（即带有”then” 方法），返回的promise会“跟随”这个thenable的对象，采用它的最终状态；否则返回的promise将以此值完成。此函数将类promise对象的多层嵌套展平。</p><h3 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写Promise</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span>  <span class="comment">//初始状态</span></span><br><span class="line"><span class="keyword">const</span> RESOLVED = <span class="string">'resolved'</span> <span class="comment">//成功状态</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span> <span class="comment">//失败状态</span></span><br><span class="line"><span class="comment">//Promise构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">excutor</span>)</span>&#123;</span><br><span class="line"><span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line"><span class="comment">//初始化状态</span></span><br><span class="line">self.status = PENDING</span><br><span class="line">self.data = <span class="literal">undefined</span></span><br><span class="line">self.callbacks = [] <span class="comment">//每个元素的结构: &#123;onResolved(value)&#123;&#125;, onRejected(reason)&#123;&#125; &#125;</span></span><br><span class="line"><span class="comment">//resolve方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(self.status !== PENDING)&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改变状态，保存数据</span></span><br><span class="line">self.status = RESOLVED</span><br><span class="line">self.data = value</span><br><span class="line"><span class="comment">//如果有待执行回调函数，立即异步执行异步回调函数</span></span><br><span class="line"><span class="keyword">if</span>(self.callbacks.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">self.callbacks.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">item.onResolved(value)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//reject方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(self.status !== PENDING)&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改变状态，保存数据</span></span><br><span class="line">self.status = REJECTED</span><br><span class="line">self.data = reason</span><br><span class="line"><span class="comment">//如果有待执行回调函数，立即异步执行异步回调函数</span></span><br><span class="line"><span class="keyword">if</span>(self.callbacks.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">self.callbacks.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">item.onRejected(reason)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//立即执行excutor函数</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">excutor(resolve,reject)</span><br><span class="line">&#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">reject(error)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Promise对象的then方法</span></span><br><span class="line">MyPromise.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onResolved,onRejected</span>)</span>&#123;</span><br><span class="line">onResolved = <span class="keyword">typeof</span> onResolved === <span class="string">'function'</span> ?onResolved : <span class="function"><span class="params">value</span> =&gt;</span> value,  <span class="comment">//不写默认undefined</span></span><br><span class="line"><span class="comment">//指定默认是失败回调</span></span><br><span class="line">onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ?</span><br><span class="line">  onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> reason</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line"><span class="comment">//返回一个新的promise对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//回调函数返回的结果</span></span><br><span class="line"><span class="keyword">const</span> result = callback(self.data)</span><br><span class="line"><span class="keyword">if</span>(result <span class="keyword">instanceof</span> MyPromise)&#123;</span><br><span class="line"><span class="comment">//返回的数据是Promise</span></span><br><span class="line">result.then(resolve,reject)<span class="comment">//返回新的promise对象</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">resolve(result)</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">reject(error)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(self.status === PENDING)&#123;</span><br><span class="line">self.callbacks.push(&#123;</span><br><span class="line">onResolved(value)&#123;</span><br><span class="line">handle(value)</span><br><span class="line">&#125;,</span><br><span class="line">onRejected(reason)&#123;</span><br><span class="line">handle(reason)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(self.status === RESOLVED)&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">handle(onResolved)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">handle(onRejected)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Promise对象的catch方法</span></span><br><span class="line">MyPromise.prototype.catch = <span class="function"><span class="keyword">function</span>(<span class="params">onRejected</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">undefined</span>, onRejected)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Promise的resolve方法</span></span><br><span class="line">MyPromise.resolve = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(result <span class="keyword">instanceof</span> MyPromise)&#123;</span><br><span class="line"><span class="comment">//返回的数据是Promise</span></span><br><span class="line">result.then(resolve,reject)<span class="comment">//返回新的promise对象</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">resolve(result)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Promise的reject方法</span></span><br><span class="line">MyPromise.reject = <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">reject(reason)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Promise的all方法</span></span><br><span class="line">MyPromise.all = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line"><span class="keyword">const</span> values = <span class="keyword">new</span> <span class="built_in">Array</span>(promises.length) <span class="comment">//保存成功的数据数据</span></span><br><span class="line"><span class="keyword">let</span> resolvedCount = <span class="number">0</span> <span class="comment">//成功的数量</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//遍历执行promises</span></span><br><span class="line">promises.forEach(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">MyPromise.resolve(item).then(</span><br><span class="line">value=&gt;&#123;</span><br><span class="line">reslovedCount++</span><br><span class="line">values[index] = value</span><br><span class="line"><span class="keyword">if</span>(reslovedCount === promises.length)&#123;</span><br><span class="line">resolve(values)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">reason=&gt;&#123;</span><br><span class="line">reject(reason)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Promise的race方法</span></span><br><span class="line">MyPromise.race = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">promises.forEach(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">MyPromise.resolve(item).then(</span><br><span class="line">value=&gt;&#123;</span><br><span class="line">resolve(value)</span><br><span class="line">&#125;,</span><br><span class="line">reason=&gt;&#123;</span><br><span class="line">reject(reason)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.MyPromise = MyPromise</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">resolve(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是Promise？&quot;&gt;&lt;a href=&quot;#什么是Promise？&quot; class=&quot;headerlink&quot; title=&quot;什么是Promise？&quot;&gt;&lt;/a&gt;什么是Promise？&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Promise&lt;/code&gt;是JS异步编程中的重要概念，
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://lawsan.xyz/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>一文带你了解JavaScript深拷贝</title>
    <link href="http://lawsan.xyz/2020/07/20/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3JavaScript%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>http://lawsan.xyz/2020/07/20/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3JavaScript%E6%B7%B1%E6%8B%B7%E8%B4%9D/</id>
    <published>2020-07-20T04:29:42.000Z</published>
    <updated>2020-07-20T06:33:40.618Z</updated>
    
    <content type="html"><![CDATA[<h3 id="拷贝是啥？"><a href="#拷贝是啥？" class="headerlink" title="拷贝是啥？"></a>拷贝是啥？</h3><p>顾名思义也就是复制，我们知道在JavaScript中基本数据类型都是保存在栈中的，而复杂数据类型（object）是保存在堆中的，在栈中不过是保存了堆的地址（引用）。</p><h3 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h3><p>浅深拷贝都是对引用类型的数据而言的，基本数据类型一赋值就开辟了独立的栈空间，互不影响。</p><ul><li>浅拷贝：当我们对基本数据类型复制，会把值全部复制过去的。如果是引用类型，也是把值复制过去，不过这个值是地址引用。这样如果其中一个对象改变了这个地址，就会影响到另一个对象。</li><li>深拷贝：是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本数据类型</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line">b = <span class="number">2</span>  <span class="comment">//b的值为2，a的值为1互不影响</span></span><br><span class="line"><span class="comment">//基本数据类型</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line">b[<span class="number">0</span>] = <span class="number">2</span>  <span class="comment">//b的值为[2,2,3]，a的值为[2,2,3]引用了同一个对象</span></span><br></pre></td></tr></table></figure><h3 id="赋值-amp-amp-浅拷贝-amp-amp-深拷贝的区别"><a href="#赋值-amp-amp-浅拷贝-amp-amp-深拷贝的区别" class="headerlink" title="赋值&amp;&amp;浅拷贝&amp;&amp;深拷贝的区别"></a>赋值&amp;&amp;浅拷贝&amp;&amp;深拷贝的区别</h3>赋值：只是在栈中新建一个变量，指向同一个堆内存,也就是把地址复制过来。<br>浅拷贝：会新建个一对象，如果属性是基本类型，则拷贝基本数据类型的值，如果是引用数据类型，则拷贝内存地址。因此如果其中一个对象改变了这个地址，就会影响到另一个对象。即默认拷贝构造函数只是对对象进行浅拷贝复制(逐个成员依次拷贝)，即只复制对象空间而不复制资源。<br>深拷贝：从堆内存中开辟一个新的区域存放新对象，对对象中的子对象进行递归拷贝,拷贝前后的两个对象互不影响。<br>来看看下面的例子<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//赋值</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">name:<span class="string">'lisi'</span>,</span><br><span class="line">hobby:[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line">b.name = <span class="string">'zhangsan'</span></span><br><span class="line">b.hobby = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">10</span>]</span><br><span class="line"><span class="comment">//a和b的值都为&#123;name:'zhansan',hobby:[3,4,10]&#125;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//浅拷贝</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">name:<span class="string">'lisi'</span>,</span><br><span class="line">hobby:[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = shallowClone(a)</span><br><span class="line">b.name = <span class="string">'zhangsan'</span></span><br><span class="line">b.hobby[<span class="number">1</span>] = <span class="number">10</span> <span class="comment">// 新旧对象还是共享同一块内存</span></span><br><span class="line"><span class="comment">//a的值为&#123;name:'lisi',hobby:[1,10,[3,4],5,6]&#125;</span></span><br><span class="line"><span class="comment">//b的值为&#123;name:'zhangsan',hobby:[1,10,[3,4],5,6]&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowClone</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> source) &#123;</span><br><span class="line"><span class="keyword">if</span> (source.hasOwnProperty(i)) &#123;</span><br><span class="line">target[i] = source[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//深拷贝</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">name:<span class="string">'lisi'</span>,</span><br><span class="line">hobby:[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a)) <span class="comment">//比较简单地实现深拷贝</span></span><br><span class="line">b.name = <span class="string">'zhangsan'</span></span><br><span class="line">b.hobby[<span class="number">1</span>] = <span class="number">10</span> <span class="comment">// 新旧对象不是同一块内存</span></span><br><span class="line"><span class="comment">//a的值为&#123;name:'lisi',hobby:[1,2,[3,4],5,6]&#125;</span></span><br><span class="line"><span class="comment">//b的值为&#123;name:'zhangsan',hobby:[1,10,[3,4],5,6]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="浅拷贝实现"><a href="#浅拷贝实现" class="headerlink" title="浅拷贝实现"></a>浅拷贝实现</h3><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h4><p><code>Object.assign()</code>方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是 <code>Object.assign()</code>进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">person</span>:&#123;<span class="attr">name</span>:<span class="string">'lisi'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,<span class="attr">money</span>:<span class="number">666</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;,obj1)</span><br><span class="line">obj2.person.age = <span class="number">20</span></span><br><span class="line">obj2.money = <span class="number">777</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1) <span class="comment">//&#123;person:&#123;name:'lisi',age:20&#125;,money:666&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">//&#123;person:&#123;name:'lisi',age:20&#125;,money:777&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：当object只有一层的时候，是深拷贝</p></blockquote><h4 id="Array-prototype-concat"><a href="#Array-prototype-concat" class="headerlink" title="Array.prototype.concat()"></a>Array.prototype.concat()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,&#123;<span class="attr">name</span>:<span class="string">'lisi'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = arr1.concat()</span><br><span class="line">arr2[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line">arr2[<span class="number">2</span>].name = <span class="string">'zhangsan'</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1)<span class="comment">//[1,2,&#123;name:'zhangsan',age:18&#125;,3,4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2)<span class="comment">//[1,10,&#123;name:'zhangsan',age:18&#125;,3,4]</span></span><br></pre></td></tr></table></figure><h4 id="Array-prototype-slice"><a href="#Array-prototype-slice" class="headerlink" title="Array.prototype.slice()"></a>Array.prototype.slice()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,&#123;<span class="attr">name</span>:<span class="string">'lisi'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = arr1.slice()</span><br><span class="line">arr2[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line">arr2[<span class="number">2</span>].name = <span class="string">'zhangsan'</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1)<span class="comment">//[1,2,&#123;name:'zhangsan',age:18&#125;,3,4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2)<span class="comment">//[1,10,&#123;name:'zhangsan',age:18&#125;,3,4]</span></span><br></pre></td></tr></table></figure><h4 id="展开运算符…"><a href="#展开运算符…" class="headerlink" title="展开运算符…"></a>展开运算符…</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">person</span>:&#123;<span class="attr">name</span>:<span class="string">'lisi'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,<span class="attr">money</span>:<span class="number">666</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;...obj1&#125;</span><br><span class="line">obj2.person.age = <span class="number">20</span></span><br><span class="line">obj2.money = <span class="number">777</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1) <span class="comment">//&#123;person:&#123;name:'lisi',age:20&#125;,money:666&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">//&#123;person:&#123;name:'lisi',age:20&#125;,money:777&#125;</span></span><br></pre></td></tr></table></figure><h4 id="函数库lodash的-clone方法"><a href="#函数库lodash的-clone方法" class="headerlink" title="函数库lodash的_.clone方法"></a>函数库lodash的_.clone方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">person</span>:&#123;<span class="attr">name</span>:<span class="string">'lisi'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,<span class="attr">money</span>:<span class="number">666</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = _.clone(obj1)</span><br><span class="line">obj2.person.age = <span class="number">20</span></span><br><span class="line">obj2.money = <span class="number">777</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1) <span class="comment">//&#123;person:&#123;name:'lisi',age:20&#125;,money:666&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">//&#123;person:&#123;name:'lisi',age:20&#125;,money:777&#125;</span></span><br></pre></td></tr></table></figure><h3 id="深拷贝实现"><a href="#深拷贝实现" class="headerlink" title="深拷贝实现"></a>深拷贝实现</h3><h4 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a>JSON.parse</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//浅拷贝</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">name:<span class="string">'lisi'</span>,</span><br><span class="line">hobby:[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a)) <span class="comment">//比较简单地实现深拷贝</span></span><br><span class="line">b.name = <span class="string">'zhangsan'</span></span><br><span class="line">b.hobby[<span class="number">1</span>] = <span class="number">10</span> <span class="comment">// 新旧对象不是同一块内存</span></span><br><span class="line"><span class="comment">//a的值为&#123;name:'lisi',hobby:[1,2,[3,4],5,6]&#125;</span></span><br><span class="line"><span class="comment">//b的值为&#123;name:'zhangsan',hobby:[1,10,[3,4],5,6]&#125;</span></span><br></pre></td></tr></table></figure><p>这种方法虽然可以实现数组或对象深拷贝,但不能处理函数和正则，因为这两者基于<code>JSON.stringify</code>和<code>JSON.parse</code>处理后，得到的正则就不再是正则（变为空对象），得到的函数就不再是函数（变为<code>null</code>）了。</p><h4 id="jQuery-extend-方法"><a href="#jQuery-extend-方法" class="headerlink" title="jQuery.extend()方法"></a>jQuery.extend()方法</h4><p>jquery 有提供一個$.extend可以用来做 Deep Copy;<code>$.extend(deepCopy, target, object1, [objectN])//第一个参数为true,就是深拷贝</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">person</span>:&#123;<span class="attr">name</span>:<span class="string">'lisi'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,<span class="attr">money</span>:<span class="number">666</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = $.extend(<span class="literal">true</span>,&#123;&#125;,obj1)</span><br><span class="line"><span class="built_in">console</span>.log(obj1.person === obj2.person) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="函数库lodash的-cloneDeep方法"><a href="#函数库lodash的-cloneDeep方法" class="headerlink" title="函数库lodash的_.cloneDeep方法"></a>函数库lodash的_.cloneDeep方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">person</span>:&#123;<span class="attr">name</span>:<span class="string">'lisi'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,<span class="attr">money</span>:<span class="number">666</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = _.cloneDeep(obj1)</span><br><span class="line"><span class="built_in">console</span>.log(obj1.person === obj2.person) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="手写深拷贝"><a href="#手写深拷贝" class="headerlink" title="手写深拷贝"></a>手写深拷贝</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(obj === <span class="literal">null</span>) <span class="keyword">return</span> obj <span class="comment">//如果是null返回空</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span> obj <span class="comment">//如果是基本数据类型或者函数，直接返回</span></span><br><span class="line"><span class="comment">//返回新的日期或者正则对象</span></span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj);</span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(obj);</span><br><span class="line"><span class="comment">//新建一个对象，如果是数组就是new Array() 否则是 new Object()</span></span><br><span class="line"><span class="keyword">let</span> cloneObj = <span class="keyword">new</span> obj.constructor();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line"><span class="keyword">if</span>(obj.hasOwnProperty(key))&#123;</span><br><span class="line">cloneObj[key] = deepClone(obj[key]); <span class="comment">//递归调用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;拷贝是啥？&quot;&gt;&lt;a href=&quot;#拷贝是啥？&quot; class=&quot;headerlink&quot; title=&quot;拷贝是啥？&quot;&gt;&lt;/a&gt;拷贝是啥？&lt;/h3&gt;&lt;p&gt;顾名思义也就是复制，我们知道在JavaScript中基本数据类型都是保存在栈中的，而复杂数据类型（object）是保
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://lawsan.xyz/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue开发指南之可复用性与组合</title>
    <link href="http://lawsan.xyz/2020/07/19/Vue%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%E4%B9%8B%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7%E4%B8%8E%E7%BB%84%E5%90%88/"/>
    <id>http://lawsan.xyz/2020/07/19/Vue%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%E4%B9%8B%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7%E4%B8%8E%E7%BB%84%E5%90%88/</id>
    <published>2020-07-19T04:43:24.000Z</published>
    <updated>2020-07-19T06:15:46.047Z</updated>
    
    <content type="html"><![CDATA[<h3 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>混入 (<code>mixin</code>) 提供了一种非常灵活的方式，来<code>分发 Vue 组件中的可复用功能</code>。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。<br>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。比如，数据对象在内部会进行递归合并，并在发生冲突时以<strong>组件数据优先</strong>。<br>同名钩子函数将合并为一个数组，因此<strong>都将被调用</strong>。另外，<strong>混入对象的钩子将在组件自身钩子之前调用</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">'hello'</span>,</span><br><span class="line">      foo: <span class="string">'abc'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'混入对象的钩子被调用'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  mixins: [mixin],</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">'goodbye'</span>,</span><br><span class="line">      bar: <span class="string">'def'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'组件钩子被调用'</span>)</span><br><span class="line"><span class="comment">//混入对象的钩子被调用</span></span><br><span class="line">    <span class="comment">// =&gt; &#123; message: "goodbye", foo: "abc", bar: "def" &#125;</span></span><br><span class="line"><span class="comment">//组件钩子被调用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>值为对象的选项，例如 <code>methods</code>、<code>components</code> 和 <code>directives</code>，将被合并为同一个对象。<code>两个对象键名冲突时，取组件对象的键值对</code>。</p><h4 id="全局混入"><a href="#全局混入" class="headerlink" title="全局混入"></a>全局混入</h4><p>混入也可以进行全局注册。使用时格外小心！一旦使用全局混入，它将影响每一个之后创建的 Vue 实例。使用恰当时，这可以用来为自定义选项注入处理逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为自定义的选项 'myOption' 注入一个处理器。</span></span><br><span class="line">Vue.mixin(&#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myOption = <span class="keyword">this</span>.$options.myOption</span><br><span class="line">    <span class="keyword">if</span> (myOption) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(myOption)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  myOption: <span class="string">'hello!'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt; "hello!"</span></span><br></pre></td></tr></table></figure><blockquote><p>请谨慎使用全局混入，因为它会影响每个单独创建的 Vue 实例 (包括第三方组件)。大多数情况下，只应当应用于自定义选项，就像上面示例一样。推荐将其作为插件发布，以避免重复应用混入。</p></blockquote><h4 id="自定义选项合并策略"><a href="#自定义选项合并策略" class="headerlink" title="自定义选项合并策略"></a>自定义选项合并策略</h4><p>自定义选项将使用默认策略，即简单地覆盖已有值。如果想让自定义选项以自定义逻辑合并，可以向 <code>Vue.config.optionMergeStrategies</code> 添加一个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = Vue.config.optionMergeStrategies.computed</span><br><span class="line">Vue.config.optionMergeStrategies.vuex = <span class="function"><span class="keyword">function</span> (<span class="params">toVal, fromVal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!toVal) <span class="keyword">return</span> fromVal</span><br><span class="line">  <span class="keyword">if</span> (!fromVal) <span class="keyword">return</span> toVal</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getters: merge(toVal.getters, fromVal.getters),</span><br><span class="line">    state: merge(toVal.state, fromVal.state),</span><br><span class="line">    actions: merge(toVal.actions, fromVal.actions)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h3><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册一个全局自定义指令 `v-focus`</span></span><br><span class="line">Vue.directive(<span class="string">'focus'</span>, &#123;</span><br><span class="line">  <span class="comment">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 聚焦元素</span></span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">data()&#123;</span><br><span class="line"><span class="keyword">return</span>&#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">directives: &#123;</span><br><span class="line">  focus: &#123;</span><br><span class="line"><span class="comment">// 指令的定义</span></span><br><span class="line">inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">  el.focus()</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h4><p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：</p><ul><li><code>bind</code>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li><li><code>inserted</code>：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li><li><code>update</code>：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 。</li><li><code>componentUpdated</code>：指令所在组件的 VNode 及其子 VNode 全部更新后调用。</li><li><code>unbind</code>：只调用一次，指令与元素解绑时调用。<h4 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h4>指令钩子函数会被传入以下参数：</li><li><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM。</li><li><code>binding</code>：一个对象，包含以下 property：<br>  <code>name</code>：指令名，不包括 <code>v-</code>前缀。<br>  <code>value</code>：指令的绑定值，例如：<code>v-my-directive=&quot;1 + 1&quot;</code> 中，绑定值为 2。<br>  <code>oldValue</code>：指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。<br>  <code>expression</code>：字符串形式的指令表达式。例如 <code>v-my-directive=&quot;1 + 1&quot;</code> 中，表达式为 <code>&quot;1 + 1&quot;</code>。<br>  <code>arg</code>：传给指令的参数，可选。例如 <code>v-my-directive:foo</code> 中，参数为 <code>&quot;foo&quot;</code>。<br>  <code>modifiers</code>：一个包含修饰符的对象。例如：<code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>{ foo: true, bar: true }</code>。</li><li><code>vnode</code>：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。</li><li><code>oldVnode</code>：上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。<blockquote><p>除了 el 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 <code>dataset</code> 来进行。<br>这是一个使用了这些 property 的自定义钩子样例：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"hook-arguments-example"</span> <span class="attr">v-demo:foo.a.b</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'demo'</span>, &#123;</span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding, vnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">JSON</span>.stringify</span><br><span class="line">    el.innerHTML =</span><br><span class="line">      <span class="string">'name: '</span>       + s(binding.name) + <span class="string">'&lt;br&gt;'</span> +</span><br><span class="line">      <span class="string">'value: '</span>      + s(binding.value) + <span class="string">'&lt;br&gt;'</span> +</span><br><span class="line">      <span class="string">'expression: '</span> + s(binding.expression) + <span class="string">'&lt;br&gt;'</span> +</span><br><span class="line">      <span class="string">'argument: '</span>   + s(binding.arg) + <span class="string">'&lt;br&gt;'</span> +</span><br><span class="line">      <span class="string">'modifiers: '</span>  + s(binding.modifiers) + <span class="string">'&lt;br&gt;'</span> +</span><br><span class="line">      <span class="string">'vnode keys: '</span> + <span class="built_in">Object</span>.keys(vnode).join(<span class="string">', '</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#hook-arguments-example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'hello!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><em>动态指令参数*</em><br>指令的参数可以是动态的。例如，在 <code>v-mydirective:[argument]=&quot;value&quot;</code> 中，<code>argument</code> 参数可以根据组件实例数据进行更新！这使得自定义指令可以在应用中被灵活使用。<h5 id="函数简写"><a href="#函数简写" class="headerlink" title="函数简写"></a>函数简写</h5>在很多时候，你可能想在 <code>bind</code> 和 <code>update</code> 时触发相同行为，而不关心其它的钩子。比如这样写：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'color-swatch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">  el.style.backgroundColor = binding.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h5>如果指令需要多个值，可以传入一个 JavaScript 对象字面量。记住，指令函数能够接受所有合法的 JavaScript 表达式。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-demo</span>=<span class="string">"&#123; color: 'white', text: 'hello!' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'demo'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(binding.value.color) <span class="comment">// =&gt; "white"</span></span><br><span class="line">  <span class="built_in">console</span>.log(binding.value.text)  <span class="comment">// =&gt; "hello!"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="渲染函数与JSX"><a href="#渲染函数与JSX" class="headerlink" title="渲染函数与JSX"></a>渲染函数与JSX</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'anchored-heading'</span>, &#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(</span><br><span class="line">      <span class="string">'h'</span> + <span class="keyword">this</span>.level,   <span class="comment">// 标签名称</span></span><br><span class="line">      <span class="keyword">this</span>.$slots.default <span class="comment">// 子节点数组</span></span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    level: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="虚拟-DOM"><a href="#虚拟-DOM" class="headerlink" title="虚拟 DOM"></a>虚拟 DOM</h4>Vue 通过建立一个虚拟 DOM 来追踪自己要如何改变真实 DOM。请仔细看这行代码：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> createElement(<span class="string">'h1'</span>, <span class="keyword">this</span>.blogTitle)</span><br></pre></td></tr></table></figure><code>createElement</code> 到底会返回什么呢？其实不是一个实际的 DOM 元素。它更准确的名字可能是 createNodeDescription，因为它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点，包括及其子节点的描述信息。我们把这样的节点描述为“虚拟节点 (virtual node)”，也常简写它为“VNode”。“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼。<h4 id="createElement-参数"><a href="#createElement-参数" class="headerlink" title="createElement 参数"></a><code>createElement</code> 参数</h4></li></ul><ol><li>一个 HTML 标签名、组件选项对象，或者resolve 了上述任何一种的一个 async 函数。必填项。</li><li>一个与模板中 attribute 对应的数据对象。可选。</li><li>子级虚拟节点 (VNodes)，由 <code>createElement()</code> 构建而成，也可以使用字符串来生成“文本虚拟节点”。可选。</li></ol><p>见<a href="https://cn.vuejs.org/v2/guide/render-function.html" target="_blank" rel="noopener">官方文档</a></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h4><p>通过全局方法 <code>Vue.use()</code> 使用插件。它需要在你调用 <code>new Vue()</code>启动应用之前完成：<br><code>Vue.use</code> 会自动阻止多次注册相同插件，届时即使多次调用也只会注册一次该插件。</p><h4 id="开发插件"><a href="#开发插件" class="headerlink" title="开发插件"></a>开发插件</h4><p>Vue.js 的插件应该暴露一个 <code>install</code> 方法。这个方法的第一个参数是 Vue 构造器，第二个参数是一个可选的选项对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">MyPlugin.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 添加全局方法或 property</span></span><br><span class="line">  Vue.myGlobalMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 添加全局资源</span></span><br><span class="line">  Vue.directive(<span class="string">'my-directive'</span>, &#123;</span><br><span class="line">    bind (el, binding, vnode, oldVnode) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 注入组件选项</span></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">  Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params">methodOptions</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：双花括号插值和 <code>v-bind</code> 表达式 (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在双花括号中 --&gt;</span></span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在 `v-bind` 中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"rawId | formatId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你可以在一个组件的选项中定义<code>本地的过滤器</code>（局部）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">  capitalize: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    value = value.toString()</span><br><span class="line">    <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者在创建 Vue 实例之前<code>全局定义过滤器</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'capitalize'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">  value = value.toString()</span><br><span class="line">  <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当全局过滤器和局部过滤器重名时，会采用局部过滤器。<br>过滤器可以串联：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>filterA</code> 被定义为接收单个参数的过滤器函数，表达式 <code>message</code> 的值将作为参数传入到函数中。然后继续调用同样被定义为接收单个参数的过滤器函数 <code>filterB</code>，将 <code>filterA</code> 的结果传递到 <code>filterB</code> 中。<br>过滤器是 JavaScript 函数，因此可以接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA(<span class="string">'arg1'</span>, arg2) &#125;&#125;</span><br></pre></td></tr></table></figure><p>这里，filterA 被定义为接收三个参数的过滤器函数。其中 <code>message</code> 的值作为第一个参数，普通字符串 <code>&#39;arg1&#39;</code> 作为第二个参数，表达式 <code>arg2</code> 的值作为第三个参数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;混入&quot;&gt;&lt;a href=&quot;#混入&quot; class=&quot;headerlink&quot; title=&quot;混入&quot;&gt;&lt;/a&gt;混入&lt;/h3&gt;&lt;h4 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h4&gt;&lt;p&gt;混入 
      
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://lawsan.xyz/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue开发指南之过渡与动画</title>
    <link href="http://lawsan.xyz/2020/07/18/Vue%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%E4%B9%8B%E8%BF%87%E6%B8%A1%E4%B8%8E%E5%8A%A8%E7%94%BB/"/>
    <id>http://lawsan.xyz/2020/07/18/Vue%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%E4%B9%8B%E8%BF%87%E6%B8%A1%E4%B8%8E%E5%8A%A8%E7%94%BB/</id>
    <published>2020-07-18T09:23:27.000Z</published>
    <updated>2020-07-19T04:32:39.024Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇文章是关于组件/单元素的过渡效果和动画效果，也是上一篇文章的续篇。</p><h3 id="进入-离开-amp-列表过渡"><a href="#进入-离开-amp-列表过渡" class="headerlink" title="进入/离开&amp;列表过渡"></a>进入/离开&amp;列表过渡</h3><h4 id="单元素-组件的过渡"><a href="#单元素-组件的过渡" class="headerlink" title="单元素/组件的过渡"></a>单元素/组件的过渡</h4><p>Vue 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡:</p><ul><li>条件渲染 (使用 v-if)</li><li>条件展示 (使用 v-show)</li><li>动态组件</li><li>组件根节点<br>这里是一个典型的例子：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"show = !show"</span>&gt;</span></span><br><span class="line">    Toggle</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fade"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span> <span class="comment">/* .fade-leave-active below version 2.1.8 */</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>当插入或删除包含在 <code>transition</code> 组件中的元素时，Vue 将会做以下处理：</li></ul><ol><li>自动嗅探目标元素是否应用了 CSS 过渡或动画，如果是，在恰当的时机添加/删除 CSS 类名。</li><li>如果过渡组件提供了 JavaScript 钩子函数，这些钩子函数将在恰当的时机被调用。</li><li>如果没有找到 JavaScript 钩子并且也没有检测到 CSS 过渡/动画，DOM 操作 (插入/删除) 在下一帧中立即执行。<h5 id="过渡的类名"><a href="#过渡的类名" class="headerlink" title="过渡的类名"></a>过渡的类名</h5>在进入/离开的过渡中，会有 6 个 class 切换。</li><li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li><li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li><li><code>v-enter-to</code>：2.1.8 版及以上定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 <code>v-enter</code> 被移除)，在过渡/动画完成之后移除。</li><li><code>v-leave</code>：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li><li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li><li><code>v-leave-to</code>：2.1.8 版及以上定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 <code>v-leave</code> 被删除)，在过渡/动画完成之后移除。</li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/18/transition.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 <code>&lt;transition&gt;</code>，则 <code>v-</code> 是这些类名的默认前缀。如果你使用了 <code>&lt;transition name=&quot;my-transition&quot;&gt;</code>，那么 <code>v-enter</code> 会替换为 <code>my-transition-enter</code>。<h5 id="CSS过渡"><a href="#CSS过渡" class="headerlink" title="CSS过渡"></a>CSS过渡</h5>常用的过渡都是使用 CSS 过渡。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//html 和 js 部分看上面的代码</span><br><span class="line"><span class="comment">/* 可以设置不同的进入和离开动画 */</span></span><br><span class="line"><span class="comment">/* 设置持续时间和动画函数 */</span></span><br><span class="line"><span class="selector-class">.fade-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">8s</span> <span class="built_in">cubic-bezier</span>(<span class="number">1.0</span>, <span class="number">0.5</span>, <span class="number">0.8</span>, <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span></span><br><span class="line"><span class="comment">/* .fade-leave-active for below version 2.1.8 */</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">10px</span>);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h5>CSS 动画用法同 CSS 过渡，区别是在动画中 <code>v-enter</code> 类名在节点插入 DOM 后不会立即删除，而是在 <code>animationend</code> 事件触发时删除。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//html 和 js 部分看上面的代码</span><br><span class="line"><span class="selector-class">.fade-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: fade-in .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: fade-in .<span class="number">5s</span> reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> fade-in &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自定义过渡的类名"><a href="#自定义过渡的类名" class="headerlink" title="自定义过渡的类名"></a>自定义过渡的类名</h5>我们可以通过以下 attribute 来自定义过渡类名：</li></ol><ul><li><code>enter-class</code></li><li><code>enter-active-class</code></li><li><code>enter-to-class</code> (2.1.8+)</li><li><code>leave-class</code></li><li><code>leave-active-class</code></li><li><code>leave-to-class</code> (2.1.8+)<br>他们的优先级高于普通的类名，这对于 Vue 的过渡系统和其他第三方 CSS 动画库，如 <code>Animate.css</code> 结合使用十分有用。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/animate.css@3.5.1"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"show = !show"</span>&gt;</span></span><br><span class="line">    Toggle render</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"custom-classes-transition"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">enter-active-class</span>=<span class="string">"animated tada"</span>  //自定义过渡类名</span></span><br><span class="line"><span class="tag">    <span class="attr">leave-active-class</span>=<span class="string">"animated bounceOutRight"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="同时使用过渡和动画"><a href="#同时使用过渡和动画" class="headerlink" title="同时使用过渡和动画"></a>同时使用过渡和动画</h5>Vue 为了知道过渡的完成，必须设置相应的事件监听器。它可以是 <code>transitionend</code> 或 <code>animationend</code>，这取决于给元素应用的 CSS 规则。如果你使用其中任何一种，Vue 能自动识别类型并设置监听。<br>但是，在一些场景中，你需要给同一个元素同时设置两种过渡动效，比如 <code>animation</code> 很快的被触发并完成了，而 <code>transition</code> 效果还没结束。在这种情况中，你就需要使用<code>type</code> attribute 并设置 <code>animation</code> 或 <code>transition</code> 来明确声明你需要 Vue 监听的类型。<h5 id="显性的过渡持续时间"><a href="#显性的过渡持续时间" class="headerlink" title="显性的过渡持续时间"></a>显性的过渡持续时间</h5>你可以用 <code>&lt;transition&gt;</code> 组件上的 duration prop 定制一个显性的过渡持续时间 (以毫秒计)：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">"1000"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>你也可以定制进入和移出的持续时间：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">"&#123; enter: 500, leave: 800 &#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="JavaScript钩子"><a href="#JavaScript钩子" class="headerlink" title="JavaScript钩子"></a>JavaScript钩子</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:before-enter</span>=<span class="string">"beforeEnter"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enter</span>=<span class="string">"enter"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:after-enter</span>=<span class="string">"afterEnter"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enter-cancelled</span>=<span class="string">"enterCancelled"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:before-leave</span>=<span class="string">"beforeLeave"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:leave</span>=<span class="string">"leave"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:after-leave</span>=<span class="string">"afterLeave"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:leave-cancelled</span>=<span class="string">"leaveCancelled"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>除了<code>enter</code>和<code>leave</code>可以接受<code>el</code>、<code>done</code>两个参数外，其他的都只接受<code>el</code>一个参数;<blockquote><p>当只用 JavaScript 过渡的时候，在 <code>enter</code> 和 <code>leave</code> 中必须使用 <code>done</code> 进行回调。否则，它们将被同步调用，过渡会立即完成。<br>推荐对于仅使用 JavaScript 过渡的元素添加 <code>v-bind:css=&quot;false&quot;</code>，Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响。</p></blockquote><h4 id="初始渲染的过渡"><a href="#初始渲染的过渡" class="headerlink" title="初始渲染的过渡"></a>初始渲染的过渡</h4>可以通过 <code>appear</code> attribute 设置节点在初始渲染的过渡<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>这里默认和进入/离开过渡一样，同样也可以自定义 CSS 类名。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear-class</span>=<span class="string">"custom-appear-class"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear-to-class</span>=<span class="string">"custom-appear-to-class"</span> (<span class="attr">2.1.8</span>+)</span></span><br><span class="line"><span class="tag">  <span class="attr">appear-active-class</span>=<span class="string">"custom-appear-active-class"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>自定义 JavaScript 钩子：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:before-appear</span>=<span class="string">"customBeforeAppearHook"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:appear</span>=<span class="string">"customAppearHook"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:after-appear</span>=<span class="string">"customAfterAppearHook"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:appear-cancelled</span>=<span class="string">"customAppearCancelledHook"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>在上面的例子中，无论是 <code>appear</code> attribute 还是 <code>v-on:appear</code> 钩子都会生成初始渲染过渡。<h4 id="多个元素的过渡"><a href="#多个元素的过渡" class="headerlink" title="多个元素的过渡"></a>多个元素的过渡</h4>我们之后讨论多个组件的过渡，对于原生标签可以使用 <code>v-if/v-else</code>。最常见的多标签过渡是一个列表和描述这个列表为空消息的元素：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">v-if</span>=<span class="string">"items.length &gt; 0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>Sorry, no items found.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当有相同标签名的元素切换时，需要通过 <code>key</code> attribute 设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容。即使在技术上没有必要，给在 <code>&lt;transition&gt;</code> 组件中的多个元素设置 key 是一个更好的实践。<br>示例：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">"isEditing"</span> <span class="attr">key</span>=<span class="string">"save"</span>&gt;</span> </span><br><span class="line">    Save</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-else</span> <span class="attr">key</span>=<span class="string">"edit"</span>&gt;</span></span><br><span class="line">    Edit</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>在一些场景中，也可以通过给同一个元素的 <code>key</code> attribute 设置不同的状态来代替 <code>v-if</code> 和 <code>v-else</code>，上面的例子可以重写为：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:key</span>=<span class="string">"isEditing"</span>&gt;</span></span><br><span class="line">    &#123;&#123; isEditing ? 'Save' : 'Edit' &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="过渡模式（mode）"><a href="#过渡模式（mode）" class="headerlink" title="过渡模式（mode）"></a>过渡模式（mode）</h5></li><li><code>in-out</code>：新元素先进行过渡，完成之后当前元素过渡离开。</li><li><code>out-in</code>：当前元素先进行过渡，完成之后新元素过渡进入。<br>用 <code>out-in</code> 重写之前的开关按钮过渡：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fade"</span> <span class="attr">mode</span>=<span class="string">"out-in"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... the buttons ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="多个组件的过渡"><a href="#多个组件的过渡" class="headerlink" title="多个组件的过渡"></a>多个组件的过渡</h4>多个组件的过渡简单很多 - 我们不需要使用 <code>key</code> attribute。相反，我们只需要使用动态组件：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"component-fade"</span> <span class="attr">mode</span>=<span class="string">"out-in"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列表过渡"><a href="#列表过渡" class="headerlink" title="列表过渡"></a>列表过渡</h4>使用<code>&lt;transition-group&gt;</code> 组件可以进行列表渲染动画。在我们深入例子之前，先了解关于这个组件的几个特点：</li><li>不同于 <code>&lt;transition&gt;</code>，它会以一个真实元素呈现：默认为一个 <code>&lt;span&gt;</code>。你也可以通过 <code>tag</code> attribute 更换为其他元素。</li><li>过渡模式不可用，因为我们不再相互切换特有的元素。</li><li>内部元素总是需要提供唯一的 <code>key</code> attribute 值。</li><li>CSS 过渡的类将会应用在内部的元素中，而不是这个组/容器本身。<h5 id="列表的进入-离开过渡"><a href="#列表的进入-离开过渡" class="headerlink" title="列表的进入/离开过渡"></a>列表的进入/离开过渡</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">"list"</span> <span class="attr">tag</span>=<span class="string">"p"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">v-bind:key</span>=<span class="string">"item"</span> <span class="attr">class</span>=<span class="string">"list-item"</span>&gt;</span></span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list-enter-active</span>, <span class="selector-class">.list-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list-enter</span>, <span class="selector-class">.list-leave-to</span></span><br><span class="line"><span class="comment">/* .list-leave-active for below version 2.1.8 */</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">30px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="列表的排序过渡"><a href="#列表的排序过渡" class="headerlink" title="列表的排序过渡"></a>列表的排序过渡</h5><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，还可以改变定位。要使用这个新功能只需了解新增的 <code>v-move</code> class，它会在元素的改变定位的过程中应用。像之前的类名一样，可以通过 <code>name</code> attribute 来自定义前缀，也可以通过 <code>move-class</code> attribute 手动设置。<h4 id="可复用的过渡"><a href="#可复用的过渡" class="headerlink" title="可复用的过渡"></a>可复用的过渡</h4>过渡可以通过 Vue 的组件系统实现复用。要创建一个可复用过渡组件，你需要做的就是将 <code>&lt;transition&gt;</code> 或者 <code>&lt;transition-group&gt;</code>作为根组件，然后将任何子组件放置在其中就可以了。<h4 id="动态过渡"><a href="#动态过渡" class="headerlink" title="动态过渡"></a>动态过渡</h4>在 Vue 中即使是过渡也是数据驱动的！动态过渡最基本的例子是通过 <code>name</code> attribute 来绑定动态值。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">v-bind:name</span>=<span class="string">"transitionName"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="状态过渡"><a href="#状态过渡" class="headerlink" title="状态过渡"></a>状态过渡</h3>见<a href="https://cn.vuejs.org/v2/guide/transitioning-state.html" target="_blank" rel="noopener">官方文档</a><br>此篇完结</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这篇文章是关于组件/单元素的过渡效果和动画效果，也是上一篇文章的续篇。&lt;/p&gt;
&lt;h3 id=&quot;进入-离开-amp-列表过渡&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://lawsan.xyz/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的$attrs和$listeners</title>
    <link href="http://lawsan.xyz/2020/07/15/Vue%E4%B8%AD%E7%9A%84$attrs%E5%92%8C$listeners/"/>
    <id>http://lawsan.xyz/2020/07/15/Vue%E4%B8%AD%E7%9A%84$attrs%E5%92%8C$listeners/</id>
    <published>2020-07-15T10:46:04.000Z</published>
    <updated>2020-07-16T03:22:39.944Z</updated>
    
    <content type="html"><![CDATA[<h3 id="attrs"><a href="#attrs" class="headerlink" title="$attrs"></a>$attrs</h3><p>如果向一个子组件传递数据attribute时，该子组件并没有相应prop定义的attribute时。这些 attribute 会被添加到这个组件的根元素上。<br>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    以下为组件S1的内容</span><br><span class="line">    <span class="tag">&lt;<span class="name">S1</span> <span class="attr">:foo</span>=<span class="string">'foo'</span> <span class="attr">:eoo</span>=<span class="string">'eoo'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">import S1 from '@/components/S1.vue'</span><br><span class="line">data()&#123;</span><br><span class="line">return&#123;</span><br><span class="line">foo:'I am foo',</span><br><span class="line">eoo:'I am eoo',</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">S1</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//子组件 S1</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;&#123;foo&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">data()&#123;</span><br><span class="line">return&#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">props:['foo'],</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/15/1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/15/2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们可以看到只有foo才会显示，而eoo则被添加到根元素中了，即便页面添加了<code></code>也不会显示的。<br>如果不希望组件的根元素继承 <code>attribute</code>，你可以在组件的选项中设置 <code>inheritAttrs: false</code>。再配合实例的 <code>$attrs</code> property 使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//修改后的子组件S1，添加$attrs，并查看其值</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>foo:&#123;&#123;foo&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>attrs:&#123;&#123;$attrs&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">data()&#123;</span><br><span class="line">return&#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">props:['foo'],</span><br><span class="line">inheritAttrs: false,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我们可以看到在组件的选项中设置 <code>inheritAttrs: false</code>后，组件没有相应prop定义的attribute将会被绑定到<code>$attrs</code>上。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/15/3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/15/4.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>通过对象取值的方法是行不通的，比如<code>$attrs.eoo</code>,但是我们可以通过<code>v-bind=&quot;$attrs&quot;</code>传入其内部组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//修改后的子组件S1,引入子组件S1Child</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>foo:&#123;&#123;foo&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>attrs:&#123;&#123;$attrs&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">以下为组件S1Child的内容</span><br><span class="line"><span class="tag">&lt;<span class="name">s1-child</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span>&gt;</span><span class="tag">&lt;/<span class="name">s1-child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">import S1Child from '@/components/S1Child.vue'</span><br><span class="line">data()&#123;</span><br><span class="line">return&#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">S1Child,</span><br><span class="line">&#125;,</span><br><span class="line">props:['foo'],</span><br><span class="line">inheritAttrs: false,</span><br><span class="line">...</span><br><span class="line">//子组件S1Child</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>eoo:&#123;&#123;eoo&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">props:['eoo'],</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/15/5.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们可以看到，通过<code>$attrs</code>可以接收组件没有相应prop定义的attribute，并通过<code>prop</code>让其子子组件接收到。那么组件<code>S1Child</code>的信息怎么传递给其父父组件呐？<code>$listeners</code>。</p><h3 id="listeners"><a href="#listeners" class="headerlink" title="$listeners"></a>$listeners</h3><p>包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 <code>v-on=&quot;$listeners&quot;</code> 传入内部组件——在创建更高层次的组件时非常有用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//修改后的父组件，添加绑定事件@upData</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    以下为组件S1的内容</span><br><span class="line">    <span class="tag">&lt;<span class="name">S1</span> <span class="attr">:foo</span>=<span class="string">'foo'</span> <span class="attr">:eoo</span>=<span class="string">'eoo'</span> @<span class="attr">upData</span>=<span class="string">"getS1ChidData"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">import S1 from '@/components/S1.vue'</span><br><span class="line">data()&#123;</span><br><span class="line">return&#123;</span><br><span class="line">foo:'I am foo',</span><br><span class="line">eoo:'I am eoo',</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">S1</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">getS1ChidData(value)&#123;</span><br><span class="line">console.log('这是组件S1Chid传过来的数据：',value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//修改后的子组件S1,绑定$listeners</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>foo:&#123;&#123;foo&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>attrs:&#123;&#123;$attrs&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">以下为组件S1Child的内容</span><br><span class="line"><span class="tag">&lt;<span class="name">s1-child</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span> <span class="attr">v-on</span>=<span class="string">"$listeners"</span>&gt;</span><span class="tag">&lt;/<span class="name">s1-child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">import S1Child from '@/components/S1Child.vue'</span><br><span class="line">data()&#123;</span><br><span class="line">return&#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">S1Child,</span><br><span class="line">&#125;,</span><br><span class="line">props:['foo'],</span><br><span class="line">inheritAttrs: false,</span><br><span class="line">...</span><br><span class="line">//子组件S1Child</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>eoo:&#123;&#123;eoo&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"startUpData"</span>&gt;</span>upData<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">props:['eoo'],</span><br><span class="line">methods:&#123;</span><br><span class="line">startUpData()&#123;</span><br><span class="line">this.$emit('upData','我是S1Child传过来的数据！')</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/July/15/6.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>通过点击组件S1Child中的按钮触发当前实例上的<code>upData</code>事件,但是并不能直接触发非父组件的<code>upData</code>事件，需要通过<code>v-on=&quot;$listeners&quot;</code>也就通过<code>$listeners</code>接收了父组件的事件监听器并传给内部组件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;attrs&quot;&gt;&lt;a href=&quot;#attrs&quot; class=&quot;headerlink&quot; title=&quot;$attrs&quot;&gt;&lt;/a&gt;$attrs&lt;/h3&gt;&lt;p&gt;如果向一个子组件传递数据attribute时，该子组件并没有相应prop定义的attribute时。这些 att
      
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://lawsan.xyz/tags/Vue/"/>
    
  </entry>
  
</feed>
