<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lawson&#39;s Blog</title>
  
  <subtitle>尝尽人间百味，方知人间冷暖。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lawsan.xyz/"/>
  <updated>2020-07-07T05:31:45.698Z</updated>
  <id>http://lawsan.xyz/</id>
  
  <author>
    <name>Lawson</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>canvas踩坑日记</title>
    <link href="http://lawsan.xyz/2020/07/02/canvas%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    <id>http://lawsan.xyz/2020/07/02/canvas%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/</id>
    <published>2020-07-02T08:25:24.000Z</published>
    <updated>2020-07-07T05:31:45.698Z</updated>
    
    <content type="html"><![CDATA[<p>这次利用canvas主要是对图片进行剪切，再对要修改图片的部分用html显示，然后通过<code>html2canvas.js</code>转化为图片。这个方法可以对图片进行PS，不过这种方法有局限，需要定制以及移动端适配。</p><h3 id="利用canvas的API进行剪切"><a href="#利用canvas的API进行剪切" class="headerlink" title="利用canvas的API进行剪切"></a>利用canvas的API进行剪切</h3><p>注意：Canvas 的默认大小为300像素×150像素（宽×高，像素的单位是px）。但是，可以使用HTML的高度和宽度属性来自定义Canvas 的尺寸。<font color="red">也就是说通过css给canvas添加样式是行不通的</font>（这个坑费了我好多时间)。<br>解决方案：动态添加canvas；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>图片应用:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"scream"</span> <span class="attr">src</span>=<span class="string">"img_the_scream.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>画布:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"150"</span> <span class="attr">style</span>=<span class="string">"border:1px solid #d3d3d3;"</span>&gt;</span></span><br><span class="line">您的浏览器不支持 HTML5 canvas 标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"scream"</span>).onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> c=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line">    <span class="keyword">var</span> ctx=c.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="keyword">var</span> img=<span class="built_in">document</span>.getElementById(<span class="string">"scream"</span>);</span><br><span class="line">    ctx.drawImage(img,<span class="number">90</span>,<span class="number">130</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">60</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="关于drawImage的使用"><a href="#关于drawImage的使用" class="headerlink" title="关于drawImage的使用"></a>关于drawImage的使用</h3><p>有三种语法的使用：</p><ol><li><code>context.drawImage(img,dx,dy);</code></li><li><code>context.drawImage(img,dx,dy,dw,dh);</code></li><li><code>context.drawImage(img,sx,sy,sw,sh,dx,dy,dw,dh);</code><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://happychuan-pic.oss-cn-shenzhen.aliyuncs.com/2020/7.02/1.jpg" alt="坐标草图" title>                </div>                <div class="image-caption">坐标草图</div>            </figure>对图片进行剪切<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> IMG = &#123;</span><br><span class="line">file: <span class="number">0</span>, <span class="comment">//图片文件</span></span><br><span class="line">width: <span class="number">0</span>, <span class="comment">//源图片宽度</span></span><br><span class="line">height: <span class="number">0</span>, <span class="comment">//源图片高度</span></span><br><span class="line">firstY: <span class="number">330</span>, <span class="comment">//第一次剪切高度（从0开始）</span></span><br><span class="line">secondY: <span class="number">410</span>, <span class="comment">//第二次剪切高度（第二次开始剪切的y坐标）</span></span><br><span class="line">money: <span class="string">"-588.00"</span>, <span class="comment">//要修改的数字</span></span><br><span class="line">bg: <span class="string">"#f7f7f7"</span>, <span class="comment">//#f5f5f5</span></span><br><span class="line">fontSize:<span class="string">'60px'</span>,</span><br><span class="line">&#125;</span><br><span class="line">pic.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">IMG.height = pic.height;</span><br><span class="line">IMG.width = pic.width;</span><br><span class="line">ctx1.drawImage(pic, <span class="number">0</span>, <span class="number">0</span>, pic.width, IMG.firstY, <span class="number">0</span>, <span class="number">0</span>, pic.width, IMG.firstY);</span><br><span class="line">ctx2.drawImage(pic, <span class="number">0</span>, IMG.secondY, pic.width, (IMG.height - IMG.secondY), <span class="number">0</span>, <span class="number">0</span>, pic.width, (IMG.height -IMG.secondY));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>对图片要要修改的部分用html代替显示，然后html转图片<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">html2canvas(canvasBox, &#123;</span><br><span class="line">allowTaint: <span class="literal">true</span>, <span class="comment">//允许污染</span></span><br><span class="line">taintTest: <span class="literal">true</span>, <span class="comment">//在渲染前测试图片</span></span><br><span class="line">useCORS: <span class="literal">true</span>, <span class="comment">//使用跨域</span></span><br><span class="line">background:IMG.bg,</span><br><span class="line">dpi: <span class="built_in">window</span>.devicePixelRatio * <span class="number">2</span>, <span class="comment">//分辨率，是图片清晰点</span></span><br><span class="line">scale: <span class="number">2</span>,</span><br><span class="line">height: IMG.height - <span class="number">10</span>, <span class="comment">//截图高度</span></span><br><span class="line">width: IMG.width, <span class="comment">//截图宽度</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">canvas</span>) </span>&#123;</span><br><span class="line"><span class="comment">//显示ps好的图片</span></span><br><span class="line"><span class="keyword">let</span> show = <span class="built_in">document</span>.getElementById(<span class="string">'show'</span>);</span><br><span class="line">show.style.display = <span class="string">'block'</span>;</span><br><span class="line">show.src = canvas.toDataURL();</span><br><span class="line">canvasBox.style.display = <span class="string">'none'</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>此次是对支付宝账单详情的金额进行ps，整个源码地址==&gt;<a href="https://gitee.com/chuan8905/codes/ds7e8pmfqoajn94yxi6c181" target="_blank" rel="noopener">canvas对支付宝账单详情进行P图</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这次利用canvas主要是对图片进行剪切，再对要修改图片的部分用html显示，然后通过&lt;code&gt;html2canvas.js&lt;/code&gt;转化为图片。这个方法可以对图片进行PS，不过这种方法有局限，需要定制以及移动端适配。&lt;/p&gt;
&lt;h3 id=&quot;利用canvas的API
      
    
    </summary>
    
    
    
      <category term="canvas" scheme="http://lawsan.xyz/tags/canvas/"/>
    
      <category term="html2canvas" scheme="http://lawsan.xyz/tags/html2canvas/"/>
    
  </entry>
  
  <entry>
    <title>聊聊几种排序算法</title>
    <link href="http://lawsan.xyz/2020/07/02/%E8%81%8A%E8%81%8A%E5%87%A0%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://lawsan.xyz/2020/07/02/%E8%81%8A%E8%81%8A%E5%87%A0%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2020-07-02T08:09:54.494Z</published>
    <updated>2020-07-03T14:57:34.258Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Javascript-API实现排序"><a href="#Javascript-API实现排序" class="headerlink" title="Javascript API实现排序"></a>Javascript API实现排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">72</span>, <span class="number">45</span>, <span class="number">62</span>, <span class="number">12</span>, <span class="number">23</span>, <span class="number">67</span>, <span class="number">80</span>, <span class="number">56</span>, <span class="number">90</span>, <span class="number">6</span>, <span class="number">9</span>];</span><br><span class="line">arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b);</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>基本思路：每次执行循环就把一个最大的数放到最后，就像气泡一样一个一个的冒；第一个循环遍历数组所有元素，第二个循环遍历是找出最大数值然后放在最后，时间复杂度为O(n2)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> arrLength = arr.length</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrLength; i++) &#123;</span><br><span class="line"><span class="comment">//两个数比较，i表示数组总个数，j代表第一个数（索引较前）最大就是倒数第二个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arrLength - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">[arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]] <span class="comment">//交换两个数值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>基本思路：</p><ul><li>每次执行循环找出最小值的索引值，并把这个最小放到前面，索引i前面的数组是依次排好的，时间复杂度为O(n2)。</li><li>与冒泡排序比较，冒泡排序是每次找出最大值放到最后而选择排序这是每次找出最小值放到前面。每次循环都会从乱序数组中找出最大（最小）值排到有序数组中。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> arrLength = arr.length</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrLength; i++) &#123;</span><br><span class="line"><span class="keyword">let</span> minIndex = i</span><br><span class="line"><span class="comment">//每次循环找出最小值索引</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j = i;j&lt;arrLength;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&lt;arr[minIndex])&#123;</span><br><span class="line">minIndex = j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把最小值放到前面数组</span></span><br><span class="line">[arr[i],arr[minIndex]] = [arr[minIndex],arr[i]]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>基本思路：在已有排序的数组中找出自己位置，插入其中；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> arrLength = arr.length</span><br><span class="line"><span class="keyword">let</span> preIndex,current</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;arrLength;i++)&#123;</span><br><span class="line">preIndex = i - <span class="number">1</span> </span><br><span class="line">current = arr[i]</span><br><span class="line"><span class="comment">//这个循环就是找出自己的位置，然后跳出，比较这个原始和current的大小，大则移后</span></span><br><span class="line"><span class="keyword">while</span>(preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; current)&#123;</span><br><span class="line">arr[preIndex + <span class="number">1</span>] = arr[preIndex]</span><br><span class="line"><span class="number">45</span>,<span class="number">72</span>,<span class="number">72</span></span><br><span class="line">preIndex --;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">arr[preIndex + <span class="number">1</span>] = current;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>基本思路：该算法是采用分治法，将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> len = arr.length</span><br><span class="line"><span class="keyword">if</span>(len&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把长度为n的输入序列分成两个长度为n/2的子序列</span></span><br><span class="line"><span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor(len/<span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> left = arr.slice(<span class="number">0</span>,mid)</span><br><span class="line"><span class="keyword">let</span> right = arr.slice(mid)</span><br><span class="line"><span class="comment">//对这两个子序列分别采用归并排序</span></span><br><span class="line"><span class="keyword">return</span> merge(mergeSort(left),mergeSort(right))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将两个排序好的子序列合并成一个最终的排序序列。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left,right</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> result = []</span><br><span class="line"><span class="keyword">while</span>(left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>])&#123;</span><br><span class="line">result.push(left.shift())</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">result.push(right.shift())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(left.length)&#123;</span><br><span class="line">result.push(left.shift())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(right.length)&#123;</span><br><span class="line">result.push(right.shift())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>基本思路：</p><ul><li>从数列中挑出一个元素，称为 “基准”（pivot）；</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr,left,right</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> len = arr.length,</span><br><span class="line">partitionIndex,</span><br><span class="line">left = <span class="keyword">typeof</span> left != <span class="string">'number'</span> ? <span class="number">0</span> : left,</span><br><span class="line">right = <span class="keyword">typeof</span> right != <span class="string">'number'</span> ? len - <span class="number">1</span> : right;</span><br><span class="line"><span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">partitionIndex = partition(arr, left ,right)</span><br><span class="line">quickSort(arr, left, partitionIndex<span class="number">-1</span>)</span><br><span class="line">quickSort(arr, partitionIndex+<span class="number">1</span>, right)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分区操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr, left ,right</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> pivot = left,</span><br><span class="line">index =pivot + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = index;i &lt;= right; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] &lt; arr[pivot])&#123;</span><br><span class="line">[arr[i],arr[index]] = [arr[index],arr[i]]</span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">[arr[pivot],arr[index<span class="number">-1</span>]] = [arr[index<span class="number">-1</span>],arr[pivot]]</span><br><span class="line"><span class="keyword">return</span> index<span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Javascript-API实现排序&quot;&gt;&lt;a href=&quot;#Javascript-API实现排序&quot; class=&quot;headerlink&quot; title=&quot;Javascript API实现排序&quot;&gt;&lt;/a&gt;Javascript API实现排序&lt;/h3&gt;&lt;figure c
      
    
    </summary>
    
    
    
      <category term="算法" scheme="http://lawsan.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序算法" scheme="http://lawsan.xyz/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Vue监听回车事件@keyup</title>
    <link href="http://lawsan.xyz/2020/06/30/Vue%E7%9B%91%E5%90%AC%E5%9B%9E%E8%BD%A6%E4%BA%8B%E4%BB%B6keyup/"/>
    <id>http://lawsan.xyz/2020/06/30/Vue%E7%9B%91%E5%90%AC%E5%9B%9E%E8%BD%A6%E4%BA%8B%E4%BB%B6keyup/</id>
    <published>2020-06-30T13:08:05.000Z</published>
    <updated>2020-07-03T10:49:37.730Z</updated>
    
    <content type="html"><![CDATA[<p>当我们要在一个输入框中监听回车事件时要绑定<code>keyup</code>事件；<br><code>keydown</code>当键盘被按下时会触发；<code>keyup</code>当键盘松开时触发；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"search_input"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="原生JavaScript实现"><a href="#原生JavaScript实现" class="headerlink" title="原生JavaScript实现;"></a>原生JavaScript实现;</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'search_input'</span>).onkeyup = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> theEvent = <span class="built_in">window</span>.event || e;</span><br><span class="line"><span class="keyword">var</span> code = theEvent.keyCode || theEvent.which || theEvent.charCode;</span><br><span class="line"><span class="keyword">if</span> (code == <span class="number">13</span>) &#123;</span><br><span class="line"><span class="comment">//doSomeThing...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jQuery实现；"><a href="#jQuery实现；" class="headerlink" title="jQuery实现；"></a>jQuery实现；</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#search_input"</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (e.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line"><span class="comment">//doSomeThing...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Vue事件绑定实现"><a href="#Vue事件绑定实现" class="headerlink" title="Vue事件绑定实现"></a>Vue事件绑定实现</h2><p>全部键盘别名 <code>enter</code>,<code>tab</code>,<code>delete</code>,<code>esc</code>,<code>space</code>,<code>up</code>,<code>down</code>,<code>left</code>,<code>right</code>;<br>组合按键 <code>ctr</code>,<code>alt</code>,<code>shift</code>,<code>meta</code>(window系统下是win键，mac下是command键)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> @keyup.enter=<span class="string">"search"</span>  v-model=<span class="string">"search_input"</span>/&gt;</span><br><span class="line"><span class="comment">//methods</span></span><br><span class="line">search()&#123;</span><br><span class="line"><span class="comment">//doSomeThing...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是封装组件的话，例如element的<code>el-input</code>，要加上<code>native</code>;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input v-model=<span class="string">"search_input"</span> @keyup.enter.native=<span class="string">"search"</span>&gt;&lt;<span class="regexp">/el-input&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当我们要在一个输入框中监听回车事件时要绑定&lt;code&gt;keyup&lt;/code&gt;事件；&lt;br&gt;&lt;code&gt;keydown&lt;/code&gt;当键盘被按下时会触发；&lt;code&gt;keyup&lt;/code&gt;当键盘松开时触发；&lt;/p&gt;
&lt;figure class=&quot;highlight htm
      
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://lawsan.xyz/tags/Vue/"/>
    
      <category term="Element" scheme="http://lawsan.xyz/tags/Element/"/>
    
  </entry>
  
</feed>
